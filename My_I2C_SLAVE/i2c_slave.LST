C51 COMPILER V9.00   I2C_SLAVE                                                             06/26/2014 10:36:52 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE I2C_SLAVE
OBJECT MODULE PLACED IN i2c_slave.OBJ
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE i2c_slave.c LARGE OPTIMIZE(9,SPEED) BROWSE ORDER NOAREGS MODA
                    -B2 DEBUG OBJECTEXTEND

line level    source

   1          #include "i2c_slave.h"
   2          #include "dol.h"
   3          #define REQUEST 0x12//ключевое слово запроса
   4          
   5          #define  TH0_VAL 0x0
   6          #define  TL0_VAL 0x0
   7          #define WATCH_I2C       30
   8          
   9          sbit FL1=P2^0;
  10          sbit FL2=P2^1;
  11          volatile unsigned char test_buf[15]={0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF};
  12          //--------------------------------------------------------
  13            unsigned char code Crc8Table[256]={0x00, 0xBC, 0x01, 0xBD, 0x02, 0xBE, 0x03, 0xBF, 
  14                                                                                   0x04, 0xB8, 0x05, 0xB9, 0x06, 0xBA, 0x07, 0xBB, 
  15                                                                                   0x08, 0xB4, 0x09, 0xB5, 0x0A, 0xB6, 0x0B, 0xB7, 
  16                                                                                   0x0C, 0xB0, 0x0D, 0xB1, 0x0E, 0xB2, 0x0F, 0xB3, 
  17                                                                                   0x10, 0xAC, 0x11, 0xAD, 0x12, 0xAE, 0x13, 0xAF, 
  18                                                                                   0x14, 0xA8, 0x15, 0xA9, 0x16, 0xAA, 0x17, 0xAB, 
  19                                                                                   0x18, 0xA4, 0x19, 0xA5, 0x1A, 0xA6, 0x1B, 0xA7, 
  20                                                                                   0x1C, 0xA0, 0x1D, 0xA1, 0x1E, 0xA2, 0x1F, 0xA3, 
  21                                                                                   0x20, 0x9C, 0x21, 0x9D, 0x22, 0x9E, 0x23, 0x9F, 
  22                                                                                   0x24, 0x98, 0x25, 0x99, 0x26, 0x9A, 0x27, 0x9B, 
  23                                                                                   0x28, 0x94, 0x29, 0x95, 0x2A, 0x96, 0x2B, 0x97, 
  24                                                                                   0x2C, 0x90, 0x2D, 0x91, 0x2E, 0x92, 0x2F, 0x93, 
  25                                                                                   0x30, 0x8C, 0x31, 0x8D, 0x32, 0x8E, 0x33, 0x8F, 
  26                                                                                   0x34, 0x88, 0x35, 0x89, 0x36, 0x8A, 0x37, 0x8B, 
  27                                                                                   0x38, 0x84, 0x39, 0x85, 0x3A, 0x86, 0x3B, 0x87, 
  28                                                                                   0x3C, 0x80, 0x3D, 0x81, 0x3E, 0x82, 0x3F, 0x83, 
  29                                                                                   0x40, 0xFC, 0x41, 0xFD, 0x42, 0xFE, 0x43, 0xFF, 
  30                                                                                   0x44, 0xF8, 0x45, 0xF9, 0x46, 0xFA, 0x47, 0xFB, 
  31                                                                                   0x48, 0xF4, 0x49, 0xF5, 0x4A, 0xF6, 0x4B, 0xF7, 
  32                                                                                   0x4C, 0xF0, 0x4D, 0xF1, 0x4E, 0xF2, 0x4F, 0xF3, 
  33                                                                                   0x50, 0xEC, 0x51, 0xED, 0x52, 0xEE, 0x53, 0xEF, 
  34                                                                                   0x54, 0xE8, 0x55, 0xE9, 0x56, 0xEA, 0x57, 0xEB, 
  35                                                                                   0x58, 0xE4, 0x59, 0xE5, 0x5A, 0xE6, 0x5B, 0xE7, 
  36                                                                                   0x5C, 0xE0, 0x5D, 0xE1, 0x5E, 0xE2, 0x5F, 0xE3, 
  37                                                                                   0x60, 0xDC, 0x61, 0xDD, 0x62, 0xDE, 0x63, 0xDF, 
  38                                                                                   0x64, 0xD8, 0x65, 0xD9, 0x66, 0xDA, 0x67, 0xDB, 
  39                                                                                   0x68, 0xD4, 0x69, 0xD5, 0x6A, 0xD6, 0x6B, 0xD7, 
  40                                                                                   0x6C, 0xD0, 0x6D, 0xD1, 0x6E, 0xD2, 0x6F, 0xD3, 
  41                                                                                   0x70, 0xCC, 0x71, 0xCD, 0x72, 0xCE, 0x73, 0xCF, 
  42                                                                                   0x74, 0xC8, 0x75, 0xC9, 0x76, 0xCA, 0x77, 0xCB, 
  43                                                                                   0x78, 0xC4, 0x79, 0xC5, 0x7A, 0xC6, 0x7B, 0xC7, 
  44                                                                                   0x7C, 0xC0, 0x7D, 0xC1, 0x7E, 0xC2, 0x7F, 0xC3};
  45          //--------------------------------------------------------
  46          volatile unsigned char req=0;
  47          volatile unsigned char count=0;
  48          volatile unsigned char watch_timer=WATCH_I2C;//следящий за зависанием таймер
  49          
  50          //--------------------------------------------------------
  51          void I2C_Slave_Init(void) //инициализация узла i2c slave
  52          {
  53   1              I2CCON=0x00; // ведомый
  54   1              I2CADD=0x58;
C51 COMPILER V9.00   I2C_SLAVE                                                             06/26/2014 10:36:52 PAGE 2   

  55   1              IEIP2|=0x1; // разрешение прерывания от I2C     
  56   1              channels.transfer=0;
  57   1              //----------------------------------    
  58   1              TMOD &= 0xF0; // 1111 0000 
  59   1              TMOD |= 0x1; // 16 bit timer-watcdog
  60   1      
  61   1              TH0     = TH0_VAL; /// 
  62   1              TL0 = TL0_VAL;//
  63   1              watch_timer=WATCH_I2C;
  64   1      
  65   1              ET0=1;
  66   1              TR0=1;
  67   1      
  68   1              channels.I2C_CHNL.channels.state_byte=0xC0;
  69   1              //----------------------------------
  70   1              return;
  71   1      }
  72          //--------------------------------------------------------
  73          void I2C_ISR(void) interrupt 7//прерывание I2C
  74          {
  75   1              if(I2CTX==0)  //прием
  76   1              { 
  77   2                      req=I2CDAT;
  78   2                      
  79   2      
  80   2                      FL1=channels.I2C_CHNL.channels.state_byte&0x80;
  81   2      
  82   2                      channels.I2C_CHNL.channels.DOL=channels.DOL_buf;//копируем данные дола
  83   2                      channels.I2C_CHNL.channels.frequency=channels.frequency_buf;
  84   2                      channels.I2C_CHNL.channels.mid_frequency=channels.mid_frequency_buf;
  85   2                                                       
  86   2                                      
  87   2      
  88   2                      count=0;
  89   2                      //channels.transfer=1;
  90   2      
  91   2                      watch_timer=WATCH_I2C; //сброс сторожевого таймера
  92   2                      TH0     = TH0_VAL; /// 
  93   2                      TL0 = TL0_VAL;//
  94   2                      
  95   2                      switch(req)
  96   2                      {
  97   3                              case SLAVE_STATE_BYTE_RESET:
  98   3                              {
  99   4                                      channels.I2C_CHNL.channels.state_byte=0x40;//сброс байта статуса        
 100   4                              }
 101   3                              break;
 102   3      
 103   3                              case SLAVE_DOL_COUNT_RESET:
 104   3                              {
 105   4                                      Dol_Init();
 106   4                              }
 107   3                              break;
 108   3      
 109   3                              default:
 110   3                              {
 111   4                              }
 112   3                              break;
 113   3                      }
 114   2              }
 115   1              else   //передача
 116   1              {
C51 COMPILER V9.00   I2C_SLAVE                                                             06/26/2014 10:36:52 PAGE 3   

 117   2                      if(count<I2C_FRAME_SIZE)
 118   2                      {               
 119   3                              I2CDAT=channels.I2C_CHNL.i2c_buf[count];
 120   3                              count++;
 121   3                              
 122   3                              if(count==(I2C_FRAME_SIZE-1))
 123   3                              {
 124   4                                      channels.I2C_CHNL.channels.CRC=CRC_Check(channels.I2C_CHNL.i2c_buf,I2C_FRAME_SIZE-1);
 125   4                                      //channels.transfer=0;
 126   4                              }
 127   3                      }
 128   2              }
 129   1              return;
 130   1      }
 131          //--------------------------------------------------------
 132          void Timer0_ISR(void) interrupt 1
 133          {
 134   1              TF0=0;
 135   1              TH0     = TH0_VAL; /// 
 136   1              TL0 = TL0_VAL;//
 137   1              watch_timer--;
 138   1      
 139   1              if(watch_timer==0)
 140   1              {
 141   2                      I2CRS=1;
 142   2                      I2CRS=0;
 143   2                      watch_timer=WATCH_I2C;
 144   2                      
 145   2              }
 146   1              return;
 147   1      }
 148          //-----------------------CRC------------------------------------------------------------
 149            unsigned char CRC_Check( unsigned char xdata *Spool_pr,unsigned char Count_pr ) 
 150           {
 151   1      
 152   1           unsigned char crc = 0x0;
 153   1      
 154   1           while (Count_pr--)
 155   1               crc = Crc8Table[crc ^ *Spool_pr++];
 156   1      
 157   1           return crc;
 158   1      
 159   1       }
 160          
 161          //-----------------------------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    370    ----
   CONSTANT SIZE    =    256    ----
   XDATA SIZE       =     18    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
