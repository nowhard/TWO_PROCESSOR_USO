C51 COMPILER V9.53.0.0   DEBUG                                                             05/03/2018 17:44:14 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DEBUG
OBJECT MODULE PLACED IN debug.OBJ
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE debug.c LARGE OPTIMIZE(9,SPEED) BROWSE ORDER NOAREGS MODAB2 D
                    -EBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <ADuC845.h>
   2          
   3          
   4          #include "timer3.h"
   5          #include "proto_uso/proto_uso.h"
   6          #include "preferences.h"
   7          #include "eeprom/eeprom.h"
   8          #include "timer1.h"
   9          #include "adc.h"
  10          #include "watchdog.h"
  11          #include "proto_uso/channels.h"
  12          #include "frequency.h"
  13          
  14          #include "i2c.h"
  15          #include "ulongsort.h"
  16          
  17          #include "calibrate/calibrate.h"
  18          #include "pt/pt.h"
  19          
  20          #define I2C_ADDR 0x58//0xD0 
  21          
  22          extern unsigned char idata i2c_buffer[6];
  23          
  24          extern struct I2C_Channel xdata i2c_channels;
  25          extern struct pt pt_proto;
  26          volatile struct pt pt_i2c_read, pt_freq_measure,pt_sort,pt_i2c_process;
  27          
  28          
  29          //-----------------------------------------
  30          PT_THREAD(I2C_RepeatRead(struct pt *pt));
  31           //---------------------------------------
  32          
  33          void main(void) //using 0
  34          {        
  35   1        EA = 0;
  36   1        
  37   1        //CFG845=0x1;//enable xram
  38   1        
  39   1        PLLCON&=PLLCON_VAL;//настройка частоты процессора
  40   1        
  41   1        ChannelsInit();//инициализаци€ настроек каналов
  42   1        Protocol_Init();  
  43   1        Timer1_Initialize(); //таймер шедулера 200√ц  
  44   1        ADC_Initialize();
  45   1        UART_Init();
  46   1        Frequency_Init();
  47   1      
  48   1        WDT_Init(WDT_250);//включить сторожевой таймер
  49   1        I2C_Init();
  50   1      
  51   1      
  52   1        RestoreCalibrate();
  53   1      
  54   1        PT_INIT(&pt_i2c_read);
C51 COMPILER V9.53.0.0   DEBUG                                                             05/03/2018 17:44:14 PAGE 2   

  55   1        PT_INIT(&pt_freq_measure);
  56   1        PT_INIT(&pt_sort);
  57   1        PT_INIT(&pt_i2c_process);
  58   1      
  59   1        EA=1;
  60   1      
  61   1        i2c_buffer[0]=0x0;//сброс флага инициализации
  62   1      
  63   1        I2C_Repeat_Start_Read(I2C_ADDR,&i2c_buffer,1,i2c_channels.I2C_CHNL.i2c_buf,10);   //производим первое чте
             -ние заранее
  64   1        while(1)
  65   1        { 
  66   2          ProtoProcess(&pt_proto);
  67   2          I2C_RepeatRead(&pt_i2c_read);
  68   2          Frequency_Measure_Process(&pt_freq_measure);  
  69   2          ulongsort_process(&pt_sort);
  70   2          I2C_Process(&pt_i2c_process);
  71   2          WDT_Clear();      
  72   2        }
  73   1      }
  74          //-----------------------------------------------------------------------------
  75           PT_THREAD(I2C_RepeatRead(struct pt *pt))//поток чтени€ I2C
  76           {  
  77   1           PT_BEGIN(pt);
  78   3        
  79   3          while(1) 
  80   3          {
  81   4            PT_DELAY(pt,15);
  82   4            I2C_Repeat_Start_Read(I2C_ADDR,&i2c_buffer,1,i2c_channels.I2C_CHNL.i2c_buf,10); //исправить сдвиг адрес
             -ации      
  83   4          }
  84   3          PT_END(pt);
  85   1      
  86   1       }
  87          //-----------------------------------
  88          void Timer1_Interrupt(void) interrupt 3  //таймер шедулера
  89          {
  90   1      //---------------------------------------
  91   1        TH1 = TH1_VAL; ///200 Hz;
  92   1        TL1 = TL1_VAL;//
  93   1        pt_i2c_read.pt_time++;
  94   1        pt_freq_measure.pt_time++;
  95   1        pt_sort.pt_time++;
  96   1        pt_proto.pt_time++;
  97   1        return; 
  98   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    359    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     16       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
