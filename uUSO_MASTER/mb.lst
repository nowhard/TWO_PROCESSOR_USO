C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MB
OBJECT MODULE PLACED IN mb.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE modbus\mb.c LARGE OPTIMIZE(0,SPEED) BROWSE MODAB2 INCDIR(.\mo
                    -dbus\include;.\modbus;.\port;.\modbus\ascii;.\modbus\rtu;..\uUSO_MASTER) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\mb.lst)
                    - OBJECT(mb.obj)

line level    source

   1          /* 
   2           * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3           * Copyright (c) 2006 Christian Walter <wolti@sil.at>
   4           * All rights reserved.
   5           *
   6           * Redistribution and use in source and binary forms, with or without
   7           * modification, are permitted provided that the following conditions
   8           * are met:
   9           * 1. Redistributions of source code must retain the above copyright
  10           *    notice, this list of conditions and the following disclaimer.
  11           * 2. Redistributions in binary form must reproduce the above copyright
  12           *    notice, this list of conditions and the following disclaimer in the
  13           *    documentation and/or other materials provided with the distribution.
  14           * 3. The name of the author may not be used to endorse or promote products
  15           *    derived from this software without specific prior written permission.
  16           *
  17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20           * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23           * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24           * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26           * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27           *
  28           * File: $Id: mb.c,v 1.28 2010/06/06 13:54:40 wolti Exp $
  29           */
  30          
  31          /* ----------------------- System includes ----------------------------------*/
  32          #include "stdlib.h"
  33          #include "string.h"
  34          
  35          /* ----------------------- Platform includes --------------------------------*/
  36          #include "port.h"
  37          
  38          /* ----------------------- Modbus includes ----------------------------------*/
  39          #include "mb.h"
*** WARNING C258 IN LINE 41 OF .\MODBUS\RTU\MBRTU.H: 'pucFrame': mspace on parameter ignored
*** WARNING C258 IN LINE 41 OF .\MODBUS\RTU\MBRTU.H: 'pusLength': mspace on parameter ignored
  40          #include "mbconfig.h"
  41          #include "mbframe.h"
  42          #include "mbproto.h"
  43          #include "mbfunc.h"
  44          
  45          #include "mbport.h"
  46          #if MB_RTU_ENABLED == 1
  47          #include "mbrtu.h"
  48          #endif
  49          #if MB_ASCII_ENABLED == 1
  50          #include "mbascii.h"
  51          #endif
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 2   

  52          #if MB_TCP_ENABLED == 1
              #include "mbtcp.h"
              #endif
  55          
  56          #ifndef MB_PORT_HAS_CLOSE
  57          #define MB_PORT_HAS_CLOSE 0
  58          #endif
  59          
  60          /* ----------------------- Static variables ---------------------------------*/
  61          
  62          static UCHAR    ucMBAddress;
  63          eMBMode  eMBCurrentMode;
  64          
  65          static enum
  66          {
  67              STATE_ENABLED,
  68              STATE_DISABLED,
  69              STATE_NOT_INITIALIZED
  70          } eMBState = STATE_NOT_INITIALIZED;
  71          
  72          /* Functions pointer which are initialized in eMBInit( ). Depending on the
  73           * mode (RTU or ASCII) the are set to the correct implementations.
  74           */
  75          //static peMBFrameSend peMBFrameSendCur;
  76          //static pvMBFrameStart pvMBFrameStartCur;
  77          static pvMBFrameStop pvMBFrameStopCur;
  78          //static peMBFrameReceive peMBFrameReceiveCur;
  79          static pvMBFrameClose pvMBFrameCloseCur;
  80          
  81          /* Callback functions required by the porting layer. They are called when
  82           * an external event has happend which includes a timeout or the reception
  83           * or transmission of a character.
  84           */
  85          BOOL( *pxMBFrameCBByteReceived ) ( void );
  86          //BOOL( *pxMBFrameCBTransmitterEmpty ) ( void );
  87          //BOOL( *pxMBPortCBTimerExpired ) ( void );
  88          
  89          BOOL( *pxMBFrameCBReceiveFSMCur ) ( void );
  90          BOOL( *pxMBFrameCBTransmitFSMCur ) ( void );
  91          
  92          /* An array of Modbus functions handlers which associates Modbus function
  93           * codes with implementing functions.
  94           */
  95          static xMBFunctionHandler xFuncHandlers[MB_FUNC_HANDLERS_MAX] = {
  96          #if MB_FUNC_OTHER_REP_SLAVEID_ENABLED > 0
                  {MB_FUNC_OTHER_REPORT_SLAVEID, eMBFuncReportSlaveID},
              #endif
  99          #if MB_FUNC_READ_INPUT_ENABLED > 0
 100              {MB_FUNC_READ_INPUT_REGISTER, eMBFuncReadInputRegister},
 101          #endif
 102          #if MB_FUNC_READ_HOLDING_ENABLED > 0
 103              {MB_FUNC_READ_HOLDING_REGISTER, eMBFuncReadHoldingRegister},
 104          #endif
 105          #if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
 106              {MB_FUNC_WRITE_MULTIPLE_REGISTERS, eMBFuncWriteMultipleHoldingRegister},
 107          #endif
 108          #if MB_FUNC_WRITE_HOLDING_ENABLED > 0
 109              {MB_FUNC_WRITE_REGISTER, eMBFuncWriteHoldingRegister},
 110          #endif
 111          #if MB_FUNC_READWRITE_HOLDING_ENABLED > 0
                  {MB_FUNC_READWRITE_MULTIPLE_REGISTERS, eMBFuncReadWriteMultipleHoldingRegister},
              #endif
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 3   

 114          #if MB_FUNC_READ_COILS_ENABLED > 0
                  {MB_FUNC_READ_COILS, eMBFuncReadCoils},
              #endif
 117          #if MB_FUNC_WRITE_COIL_ENABLED > 0
                  {MB_FUNC_WRITE_SINGLE_COIL, eMBFuncWriteCoil},
              #endif
 120          #if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
                  {MB_FUNC_WRITE_MULTIPLE_COILS, eMBFuncWriteMultipleCoils},
              #endif
 123          #if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0
                  {MB_FUNC_READ_DISCRETE_INPUTS, eMBFuncReadDiscreteInputs},
              #endif
 126          };
 127          
 128          /* ----------------------- Start implementation -----------------------------*/
 129          eMBErrorCode
 130          eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
 131          {
 132   1          eMBErrorCode    eStatus = MB_ENOERR;
 133   1      
 134   1          /* check preconditions */
 135   1          if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 136   1              ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 137   1          {
 138   2              eStatus = MB_EINVAL;
 139   2          }
 140   1          else
 141   1          {
 142   2              ucMBAddress = ucSlaveAddress;
 143   2      
 144   2              switch ( eMode )
 145   2              {
 146   3      #if MB_RTU_ENABLED > 0
 147   3              case MB_RTU:
 148   3      //            pvMBFrameStartCur = eMBRTUStart;
 149   3                  pvMBFrameStopCur = eMBRTUStop;
 150   3      //            peMBFrameSendCur = eMBRTUSend;
 151   3      //            peMBFrameReceiveCur = eMBRTUReceive;
 152   3                  pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 153   3      //            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 154   3      //            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 155   3      //            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 156   3      
 157   3                  eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 158   3                  break;
 159   3      #endif
 160   3      #if MB_ASCII_ENABLED > 0
 161   3              case MB_ASCII:
 162   3      //            pvMBFrameStartCur = eMBASCIIStart;
 163   3                  pvMBFrameStopCur = eMBASCIIStop;
 164   3      //            peMBFrameSendCur = eMBASCIISend;
 165   3      //            peMBFrameReceiveCur = eMBASCIIReceive;
 166   3                  pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 167   3      //            pxMBFrameCBByteReceived = xMBASCIIReceiveFSM;
 168   3      //            pxMBFrameCBTransmitterEmpty = xMBASCIITransmitFSM;
 169   3      //            pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
 170   3      
 171   3                  eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 172   3                  break;
 173   3      #endif
 174   3              default:
 175   3                  eStatus = MB_EINVAL;
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 4   

 176   3              }
 177   2      
 178   2              if( eStatus == MB_ENOERR )
 179   2              {
 180   3                  if( !xMBPortEventInit(  ) )
 181   3                  {
 182   4                      /* port dependent event module initalization failed. */
 183   4                      eStatus = MB_EPORTERR;
 184   4                  }
 185   3                  else
 186   3                  {
 187   4                      eMBCurrentMode = eMode;
 188   4                      eMBState = STATE_DISABLED;
 189   4                  }
 190   3              }
 191   2          }
 192   1          return eStatus;
 193   1      }
 194          
 195          #if MB_TCP_ENABLED > 0
              eMBErrorCode
              eMBTCPInit( USHORT ucTCPPort )
              {
                  eMBErrorCode    eStatus = MB_ENOERR;
              
                  if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
                  {
                      eMBState = STATE_DISABLED;
                  }
                  else if( !xMBPortEventInit(  ) )
                  {
                      /* Port dependent event module initalization failed. */
                      eStatus = MB_EPORTERR;
                  }
                  else
                  {
              //        pvMBFrameStartCur = eMBTCPStart;
                      pvMBFrameStopCur = eMBTCPStop;
                      peMBFrameReceiveCur = eMBTCPReceive;
                      peMBFrameSendCur = eMBTCPSend;
                      pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
                      ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
                      eMBCurrentMode = MB_TCP;
                      eMBState = STATE_DISABLED;
                  }
                  return eStatus;
              }
              #endif
 224          
 225          eMBErrorCode
 226          eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
 227          {
 228   1          int             i;
 229   1          eMBErrorCode    eStatus;
 230   1      
 231   1          if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
 232   1          {
 233   2              ENTER_CRITICAL_SECTION(  );
 234   2              if( pxHandler != NULL )
 235   2              {
 236   3                  for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 237   3                  {
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 5   

 238   4                      if( ( xFuncHandlers[i].pxHandler == NULL ) ||
 239   4                          ( xFuncHandlers[i].pxHandler == pxHandler ) )
 240   4                      {
 241   5                          xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
 242   5                          xFuncHandlers[i].pxHandler = pxHandler;
 243   5                          break;
 244   5                      }
 245   4                  }
 246   3                  eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
 247   3              }
 248   2              else
 249   2              {
 250   3                  for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 251   3                  {
 252   4                      if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 253   4                      {
 254   5                          xFuncHandlers[i].ucFunctionCode = 0;
 255   5                          xFuncHandlers[i].pxHandler = NULL;
 256   5                          break;
 257   5                      }
 258   4                  }
 259   3                  /* Remove can't fail. */
 260   3                  eStatus = MB_ENOERR;
 261   3              }
 262   2              EXIT_CRITICAL_SECTION(  );
 263   2          }
 264   1          else
 265   1          {
 266   2              eStatus = MB_EINVAL;
 267   2          }
 268   1          return eStatus;
 269   1      }
 270          
 271          
 272          eMBErrorCode
 273          eMBClose( void )
 274          {
 275   1          eMBErrorCode    eStatus = MB_ENOERR;
 276   1      
 277   1          if( eMBState == STATE_DISABLED )
 278   1          {
 279   2              if( pvMBFrameCloseCur != NULL )
 280   2              {
 281   3                  pvMBFrameCloseCur(  );
 282   3              }
 283   2          }
 284   1          else
 285   1          {
 286   2              eStatus = MB_EILLSTATE;
 287   2          }
 288   1          return eStatus;
 289   1      }
 290          
 291          eMBErrorCode
 292          eMBEnable( void )
 293          {
 294   1          eMBErrorCode    eStatus = MB_ENOERR;
 295   1      
 296   1          if( eMBState == STATE_DISABLED )
 297   1          {
 298   2              /* Activate the protocol stack. */
 299   2      //        pvMBFrameStartCur(  );
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 6   

 300   2                      if(eMBCurrentMode==MB_RTU){
 301   3                              eMBRTUStart();
 302   3                      }else if(eMBCurrentMode==MB_ASCII){
 303   3                              eMBASCIIStart();
 304   3                      }
 305   2              eMBState = STATE_ENABLED;
 306   2          }
 307   1          else
 308   1          {
 309   2              eStatus = MB_EILLSTATE;
 310   2          }
 311   1          return eStatus;
 312   1      }
 313          
 314          eMBErrorCode
 315          eMBDisable( void )
 316          {
 317   1          eMBErrorCode    eStatus;
 318   1      
 319   1          if( eMBState == STATE_ENABLED )
 320   1          {
 321   2              pvMBFrameStopCur(  );
 322   2              eMBState = STATE_DISABLED;
 323   2              eStatus = MB_ENOERR;
 324   2          }
 325   1          else if( eMBState == STATE_DISABLED )
 326   1          {
 327   2              eStatus = MB_ENOERR;
 328   2          }
 329   1          else
 330   1          {
 331   2              eStatus = MB_EILLSTATE;
 332   2          }
 333   1          return eStatus;
 334   1      }
 335          
 336          sbit TEST_RECIEVED=P3^7;
 337          
 338          eMBErrorCode
 339          eMBPoll( void )
 340          {
 341   1          static UCHAR xdata   * xdata ucMBFrame;
 342   1          static UCHAR xdata    ucRcvAddress;
 343   1          static UCHAR xdata    ucFunctionCode;
 344   1          static USHORT xdata   usLength;
 345   1          static eMBException eException;
 346   1      
 347   1          int             i;
 348   1          eMBErrorCode    eStatus = MB_ENOERR;
 349   1          eMBEventType    eEvent;
 350   1      
 351   1          /* Check if the protocol stack is ready. */
 352   1          if( eMBState != STATE_ENABLED )
 353   1          {
 354   2              return MB_EILLSTATE;
 355   2          }
 356   1      
 357   1          /* Check if there is a event available. If not return control to caller.
 358   1           * Otherwise we will handle the event. */
 359   1          if( xMBPortEventGet( &eEvent ) == TRUE )
 360   1          {
 361   2              switch ( eEvent )
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 7   

 362   2              {
 363   3              case EV_READY:
 364   3                  break;
 365   3      
 366   3              case EV_FRAME_RECEIVED:    
 367   3      //            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 368   3      
 369   3      
 370   3                              if(eMBCurrentMode==MB_RTU){
 371   4                                      eStatus = eMBRTUReceive( &ucRcvAddress, &ucMBFrame, &usLength );
 372   4      
 373   4                                              
 374   4      
 375   4                                       
 376   4                              }else if(eMBCurrentMode==MB_ASCII){             
 377   4                                      eStatus = eMBASCIIReceive( &ucRcvAddress, &ucMBFrame, &usLength );
*** WARNING C259 IN LINE 377 OF MODBUS\MB.C: pointer: different mspace
 378   4                              }  
 379   3                  if( eStatus == MB_ENOERR )
 380   3                  {   
 381   4                      /* Check if the frame is for us. If not ignore the frame. */
 382   4                      if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 383   4                      {
 384   5                          ( void )xMBPortEventPost( EV_EXECUTE );      
 385   5                                               //TEST_RECIEVED=~TEST_RECIEVED;
 386   5                                                                      
 387   5                      }
 388   4                  }     
 389   3                  break;
 390   3      
 391   3              case EV_EXECUTE:   
 392   3                  ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];  
 393   3                  eException = MB_EX_ILLEGAL_FUNCTION;
 394   3                  for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 395   3                  {
 396   4                      /* No more function handlers registered. Abort. */
 397   4                      if( xFuncHandlers[i].ucFunctionCode == 0 )
 398   4                      {
 399   5                          break;
 400   5                      }
 401   4                      else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 402   4                      {
 403   5                                      
 404   5      //                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 405   5                                              switch(ucFunctionCode){
 406   6                                                      #if MB_FUNC_OTHER_REP_SLAVEID_ENABLED > 0
                                                              case MB_FUNC_OTHER_REPORT_SLAVEID:
              //                                                  {MB_FUNC_OTHER_REPORT_SLAVEID, eMBFuncReportSlaveID},
                                                                      eException = eMBFuncReportSlaveID( ucMBFrame, &usLength );
                                                                      break;
                                                              #endif
 412   6                                                      #if MB_FUNC_READ_INPUT_ENABLED > 0
 413   6                                                      case MB_FUNC_READ_INPUT_REGISTER:        
 414   6      //                                                  {MB_FUNC_READ_INPUT_REGISTER, eMBFuncReadInputRegister},
 415   6                                                              eException = eMBFuncReadInputRegister( /*ucMBFrame, &usLength*/ ); 
 416   6                                                      //      if(/*eException==6*/)
 417   6                                                              //      TEST_RECIEVED=~TEST_RECIEVED;
 418   6                                                                      
 419   6                                                              break;
 420   6                                                      #endif
 421   6                                                      #if MB_FUNC_READ_HOLDING_ENABLED > 0
 422   6                                                      case MB_FUNC_READ_HOLDING_REGISTER:
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 8   

 423   6      //                                                  {MB_FUNC_READ_HOLDING_REGISTER, eMBFuncReadHoldingRegister},
 424   6                                                              eException = eMBFuncReadHoldingRegister( ucMBFrame, &usLength );
 425   6                                                              break;
 426   6                                                      #endif
 427   6                                                      #if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
 428   6                                                      case MB_FUNC_WRITE_MULTIPLE_REGISTERS:
 429   6      //                                                  {MB_FUNC_WRITE_MULTIPLE_REGISTERS, eMBFuncWriteMultipleHoldingRegister},
 430   6                                                              eException = eMBFuncWriteMultipleHoldingRegister( ucMBFrame, &usLength );
 431   6                                                              break;
 432   6                                                      #endif
 433   6                                                      #if MB_FUNC_WRITE_HOLDING_ENABLED > 0
 434   6                                                      case MB_FUNC_WRITE_REGISTER:
 435   6      //                                                  {MB_FUNC_WRITE_REGISTER, eMBFuncWriteHoldingRegister},
 436   6                                                              eException = eMBFuncWriteHoldingRegister( ucMBFrame, &usLength );
 437   6                                                              break;
 438   6                                                      #endif
 439   6                                                      #if MB_FUNC_READWRITE_HOLDING_ENABLED > 0
                                                              case MB_FUNC_READWRITE_MULTIPLE_REGISTERS:
              //                                                  {MB_FUNC_READWRITE_MULTIPLE_REGISTERS, eMBFuncReadWriteMultipleHoldingRegister},
                                                                      eException = eMBFuncReadWriteMultipleHoldingRegister( ucMBFrame, &usLength );
                                                                      break;
                                                              #endif
 445   6                                                      #if MB_FUNC_READ_COILS_ENABLED > 0
                                                              case MB_FUNC_READ_COILS:
              //                                                  {MB_FUNC_READ_COILS, eMBFuncReadCoils},
                                                                      eException = eMBFuncReadCoils( ucMBFrame, &usLength );
                                                                      break;
                                                              #endif
 451   6                                                      #if MB_FUNC_WRITE_COIL_ENABLED > 0
                                                              case MB_FUNC_WRITE_SINGLE_COIL:
              //                                                  {MB_FUNC_WRITE_SINGLE_COIL, eMBFuncWriteCoil},
                                                                      eException = eMBFuncWriteCoil( ucMBFrame, &usLength );
                                                                      break;
                                                              #endif
 457   6                                                      #if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
                                                              case MB_FUNC_WRITE_MULTIPLE_COILS:
              //                                                  {MB_FUNC_WRITE_MULTIPLE_COILS, eMBFuncWriteMultipleCoils},
                                                                      eException = eMBFuncWriteMultipleCoils( ucMBFrame, &usLength );
                                                                      break;
                                                              #endif
 463   6                                                      #if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0
                                                              case MB_FUNC_READ_DISCRETE_INPUTS:
              //                                                  {MB_FUNC_READ_DISCRETE_INPUTS, eMBFuncReadDiscreteInputs},
                                                                      eException = eMBFuncReadDiscreteInputs( ucMBFrame, &usLength );
                                                                      break;
                                                              #endif
 469   6                                                      default:
 470   6                                                              break;
 471   6                                              }
 472   5      
 473   5                          break;
 474   5                      }
 475   4                  }
 476   3      
 477   3                  /* If the request was not sent to the broadcast address we
 478   3                   * return a reply. */
 479   3                      //       TEST_RECIEVED=~TEST_RECIEVED;
 480   3                  if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 481   3                  {
 482   4                      if( eException != MB_EX_NONE )
 483   4                      {
 484   5                          /* An exception occured. Build an error frame. */
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 9   

 485   5                          usLength = 0;
 486   5                          ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 487   5                          ucMBFrame[usLength++] = eException;
 488   5                                              
 489   5                      }
 490   4                      if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
 491   4                      {
 492   5                          vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
 493   5                      }
 494   4      //                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 495   4                                      if(eMBCurrentMode==MB_RTU){
 496   5                                              
 497   5                                              eStatus = eMBRTUSend( ucMBAddress, ucMBFrame, usLength );
 498   5                                      }else if(eMBCurrentMode==MB_ASCII){
 499   5                                              eStatus = eMBASCIISend( ucMBAddress, ucMBFrame, usLength );
 500   5                                      }
 501   4                  }
 502   3                  break;
 503   3      
 504   3              case EV_FRAME_SENT:
 505   3                  break;
 506   3              }
 507   2          }
 508   1          return MB_ENOERR;
 509   1      }
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _eMBInit (BEGIN)
                                           ; SOURCE LINE # 130
0000 900000      R     MOV     DPTR,#eMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#ucSlaveAddress
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#ucPort
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
000F 900000      R     MOV     DPTR,#eStatus
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0014 900000      R     MOV     DPTR,#ucSlaveAddress
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 6016              JZ      ?C0002
001C 900000      R     MOV     DPTR,#ucSlaveAddress
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C3                CLR     C
0023 9401              SUBB    A,#01H
0025 400B              JC      ?C0002
0027 900000      R     MOV     DPTR,#ucSlaveAddress
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D D3                SETB    C
002E 94F7              SUBB    A,#0F7H
0030 4009              JC      ?C0001
0032         ?C0002:
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0032 900000      R     MOV     DPTR,#eStatus
0035 7402              MOV     A,#02H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
0038 020000      R     LJMP    ?C0003
003B         ?C0001:
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
003B 900000      R     MOV     DPTR,#ucSlaveAddress
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#ucMBAddress
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0045 900000      R     MOV     DPTR,#eMode
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 120000      E     LCALL   ?C?CCASE
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 11  

004E 0000        R     DW      ?C0005
0050 00                DB      00H
0051 0000        R     DW      ?C0006
0053 01                DB      01H
0054 0000              DW      00H
0056 0000        R     DW      ?C0007
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 147
0058         ?C0005:
                                           ; SOURCE LINE # 149
0058 7BFF              MOV     R3,#0FFH
005A 7A00        E     MOV     R2,#HIGH eMBRTUStop
005C 7900        E     MOV     R1,#LOW eMBRTUStop
005E 900000      R     MOV     DPTR,#pvMBFrameStopCur
0061 EB                MOV     A,R3
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 EA                MOV     A,R2
0065 F0                MOVX    @DPTR,A
0066 A3                INC     DPTR
0067 E9                MOV     A,R1
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0069 7B00              MOV     R3,#00H
006B 7A00              MOV     R2,#00H
006D 7900              MOV     R1,#00H
006F 900000      R     MOV     DPTR,#pvMBFrameCloseCur
0072 EB                MOV     A,R3
0073 F0                MOVX    @DPTR,A
0074 A3                INC     DPTR
0075 EA                MOV     A,R2
0076 F0                MOVX    @DPTR,A
0077 A3                INC     DPTR
0078 E9                MOV     A,R1
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
007A 900000      R     MOV     DPTR,#ucMBAddress
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F C007              PUSH    AR7
0081 900000      R     MOV     DPTR,#ucPort
0084 E0                MOVX    A,@DPTR
0085 FD                MOV     R5,A
0086 C005              PUSH    AR5
0088 900000      R     MOV     DPTR,#ulBaudRate
008B E0                MOVX    A,@DPTR
008C FC                MOV     R4,A
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F FD                MOV     R5,A
0090 A3                INC     DPTR
0091 E0                MOVX    A,@DPTR
0092 FE                MOV     R6,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 900000      E     MOV     DPTR,#?_eMBRTUInit?BYTE+02H
0099 120000      E     LCALL   ?C?LSTXDATA
009C 900000      R     MOV     DPTR,#eParity
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 900000      E     MOV     DPTR,#?_eMBRTUInit?BYTE+06H
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 12  

00A4 EF                MOV     A,R7
00A5 F0                MOVX    @DPTR,A
00A6 D005              POP     AR5
00A8 D007              POP     AR7
00AA 120000      E     LCALL   _eMBRTUInit
00AD 900000      R     MOV     DPTR,#eStatus
00B0 EF                MOV     A,R7
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
00B2 8062              SJMP    ?C0004
                                           ; SOURCE LINE # 161
00B4         ?C0006:
                                           ; SOURCE LINE # 163
00B4 7BFF              MOV     R3,#0FFH
00B6 7A00        E     MOV     R2,#HIGH eMBASCIIStop
00B8 7900        E     MOV     R1,#LOW eMBASCIIStop
00BA 900000      R     MOV     DPTR,#pvMBFrameStopCur
00BD EB                MOV     A,R3
00BE F0                MOVX    @DPTR,A
00BF A3                INC     DPTR
00C0 EA                MOV     A,R2
00C1 F0                MOVX    @DPTR,A
00C2 A3                INC     DPTR
00C3 E9                MOV     A,R1
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
00C5 7B00              MOV     R3,#00H
00C7 7A00              MOV     R2,#00H
00C9 7900              MOV     R1,#00H
00CB 900000      R     MOV     DPTR,#pvMBFrameCloseCur
00CE EB                MOV     A,R3
00CF F0                MOVX    @DPTR,A
00D0 A3                INC     DPTR
00D1 EA                MOV     A,R2
00D2 F0                MOVX    @DPTR,A
00D3 A3                INC     DPTR
00D4 E9                MOV     A,R1
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
00D6 900000      R     MOV     DPTR,#ucMBAddress
00D9 E0                MOVX    A,@DPTR
00DA FF                MOV     R7,A
00DB C007              PUSH    AR7
00DD 900000      R     MOV     DPTR,#ucPort
00E0 E0                MOVX    A,@DPTR
00E1 FD                MOV     R5,A
00E2 C005              PUSH    AR5
00E4 900000      R     MOV     DPTR,#ulBaudRate
00E7 E0                MOVX    A,@DPTR
00E8 FC                MOV     R4,A
00E9 A3                INC     DPTR
00EA E0                MOVX    A,@DPTR
00EB FD                MOV     R5,A
00EC A3                INC     DPTR
00ED E0                MOVX    A,@DPTR
00EE FE                MOV     R6,A
00EF A3                INC     DPTR
00F0 E0                MOVX    A,@DPTR
00F1 FF                MOV     R7,A
00F2 900000      E     MOV     DPTR,#?_eMBASCIIInit?BYTE+02H
00F5 120000      E     LCALL   ?C?LSTXDATA
00F8 900000      R     MOV     DPTR,#eParity
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 13  

00FB E0                MOVX    A,@DPTR
00FC FF                MOV     R7,A
00FD 900000      E     MOV     DPTR,#?_eMBASCIIInit?BYTE+06H
0100 EF                MOV     A,R7
0101 F0                MOVX    @DPTR,A
0102 D005              POP     AR5
0104 D007              POP     AR7
0106 120000      E     LCALL   _eMBASCIIInit
0109 900000      R     MOV     DPTR,#eStatus
010C EF                MOV     A,R7
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
010E 8006              SJMP    ?C0004
                                           ; SOURCE LINE # 174
0110         ?C0007:
                                           ; SOURCE LINE # 175
0110 900000      R     MOV     DPTR,#eStatus
0113 7402              MOV     A,#02H
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
0116         ?C0004:
                                           ; SOURCE LINE # 178
0116 900000      R     MOV     DPTR,#eStatus
0119 E0                MOVX    A,@DPTR
011A FF                MOV     R7,A
011B EF                MOV     A,R7
011C 701E              JNZ     ?C0003
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
011E 120000      E     LCALL   xMBPortEventInit
0121 EF                MOV     A,R7
0122 7008              JNZ     ?C0009
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 183
0124 900000      R     MOV     DPTR,#eStatus
0127 7403              MOV     A,#03H
0129 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
012A 8010              SJMP    ?C0003
012C         ?C0009:
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
012C 900000      R     MOV     DPTR,#eMode
012F E0                MOVX    A,@DPTR
0130 FF                MOV     R7,A
0131 900000      R     MOV     DPTR,#eMBCurrentMode
0134 EF                MOV     A,R7
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
0136 900000      R     MOV     DPTR,#eMBState
0139 7401              MOV     A,#01H
013B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
013C         ?C0010:
                                           ; SOURCE LINE # 190
013C         ?C0008:
                                           ; SOURCE LINE # 191
013C         ?C0003:
                                           ; SOURCE LINE # 192
013C 900000      R     MOV     DPTR,#eStatus
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 14  

                                           ; SOURCE LINE # 193
0141         ?C0011:
0141 22                RET     
             ; FUNCTION _eMBInit (END)

             ; FUNCTION _eMBRegisterCB (BEGIN)
                                           ; SOURCE LINE # 226
0000 900000      R     MOV     DPTR,#ucFunctionCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#pxHandler
0008 EB                MOV     A,R3
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B EA                MOV     A,R2
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E E9                MOV     A,R1
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 231
0010 900000      R     MOV     DPTR,#ucFunctionCode
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 E4                CLR     A
0016 C3                CLR     C
0017 9F                SUBB    A,R7
0018 4003              JC      $ + 5H
001A 020000      R     LJMP    ?C0012
001D 900000      R     MOV     DPTR,#ucFunctionCode
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 D3                SETB    C
0024 947F              SUBB    A,#07FH
0026 4003              JC      $ + 5H
0028 020000      R     LJMP    ?C0012
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
002B C2AF              CLR     EA
                                           ; SOURCE LINE # 234
002D 7B00              MOV     R3,#00H
002F 7A00              MOV     R2,#00H
0031 7900              MOV     R1,#00H
0033 C003              PUSH    AR3
0035 C002              PUSH    AR2
0037 C001              PUSH    AR1
0039 900000      R     MOV     DPTR,#pxHandler
003C E0                MOVX    A,@DPTR
003D FB                MOV     R3,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FA                MOV     R2,A
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 F9                MOV     R1,A
0044 D082              POP     DPL
0046 D083              POP     DPH
0048 D0E0              POP     ACC
004A 6B                XRL     A,R3
004B 7008              JNZ     ?C0075
004D E9                MOV     A,R1
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 15  

004E 6582              XRL     A,DPL
0050 7003              JNZ     ?C0075
0052 EA                MOV     A,R2
0053 6583              XRL     A,DPH
0055         ?C0075:
0055 7003              JNZ     $ + 5H
0057 020000      R     LJMP    ?C0013
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
005A 900000      R     MOV     DPTR,#i
005D E4                CLR     A
005E F0                MOVX    @DPTR,A
005F A3                INC     DPTR
0060 E4                CLR     A
0061 F0                MOVX    @DPTR,A
0062         ?C0014:
0062 900000      R     MOV     DPTR,#i
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A C3                CLR     C
006B EF                MOV     A,R7
006C 9406              SUBB    A,#06H
006E EE                MOV     A,R6
006F 6480              XRL     A,#080H
0071 9480              SUBB    A,#080H
0073 4003              JC      $ + 5H
0075 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0078 900000      R     MOV     DPTR,#i
007B E0                MOVX    A,@DPTR
007C FE                MOV     R6,A
007D A3                INC     DPTR
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
0080 EF                MOV     A,R7
0081 7802              MOV     R0,#02H
0083         ?C0076:
0083 C3                CLR     C
0084 33                RLC     A
0085 CE                XCH     A,R6
0086 33                RLC     A
0087 CE                XCH     A,R6
0088 D8F9              DJNZ    R0,?C0076
008A FF                MOV     R7,A
008B 7400        R     MOV     A,#LOW xFuncHandlers+01H
008D 2F                ADD     A,R7
008E F582              MOV     DPL,A
0090 7400        R     MOV     A,#HIGH xFuncHandlers+01H
0092 3E                ADDC    A,R6
0093 F583              MOV     DPH,A
0095 E0                MOVX    A,@DPTR
0096 FB                MOV     R3,A
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 FA                MOV     R2,A
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C F9                MOV     R1,A
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 16  

009D C003              PUSH    AR3
009F C002              PUSH    AR2
00A1 C001              PUSH    AR1
00A3 7B00              MOV     R3,#00H
00A5 7A00              MOV     R2,#00H
00A7 7900              MOV     R1,#00H
00A9 D082              POP     DPL
00AB D083              POP     DPH
00AD D0E0              POP     ACC
00AF 6B                XRL     A,R3
00B0 7008              JNZ     ?C0077
00B2 E9                MOV     A,R1
00B3 6582              XRL     A,DPL
00B5 7003              JNZ     ?C0077
00B7 EA                MOV     A,R2
00B8 6583              XRL     A,DPH
00BA         ?C0077:
00BA 6049              JZ      ?C0018
00BC 900000      R     MOV     DPTR,#i
00BF E0                MOVX    A,@DPTR
00C0 FE                MOV     R6,A
00C1 A3                INC     DPTR
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 EF                MOV     A,R7
00C5 7802              MOV     R0,#02H
00C7         ?C0078:
00C7 C3                CLR     C
00C8 33                RLC     A
00C9 CE                XCH     A,R6
00CA 33                RLC     A
00CB CE                XCH     A,R6
00CC D8F9              DJNZ    R0,?C0078
00CE FF                MOV     R7,A
00CF 7400        R     MOV     A,#LOW xFuncHandlers+01H
00D1 2F                ADD     A,R7
00D2 F582              MOV     DPL,A
00D4 7400        R     MOV     A,#HIGH xFuncHandlers+01H
00D6 3E                ADDC    A,R6
00D7 F583              MOV     DPH,A
00D9 E0                MOVX    A,@DPTR
00DA FB                MOV     R3,A
00DB A3                INC     DPTR
00DC E0                MOVX    A,@DPTR
00DD FA                MOV     R2,A
00DE A3                INC     DPTR
00DF E0                MOVX    A,@DPTR
00E0 F9                MOV     R1,A
00E1 C003              PUSH    AR3
00E3 C002              PUSH    AR2
00E5 C001              PUSH    AR1
00E7 900000      R     MOV     DPTR,#pxHandler
00EA E0                MOVX    A,@DPTR
00EB FB                MOV     R3,A
00EC A3                INC     DPTR
00ED E0                MOVX    A,@DPTR
00EE FA                MOV     R2,A
00EF A3                INC     DPTR
00F0 E0                MOVX    A,@DPTR
00F1 F9                MOV     R1,A
00F2 D082              POP     DPL
00F4 D083              POP     DPH
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 17  

00F6 D0E0              POP     ACC
00F8 6B                XRL     A,R3
00F9 7008              JNZ     ?C0079
00FB E9                MOV     A,R1
00FC 6582              XRL     A,DPL
00FE 7003              JNZ     ?C0079
0100 EA                MOV     A,R2
0101 6583              XRL     A,DPH
0103         ?C0079:
0103 7056              JNZ     ?C0016
0105         ?C0018:
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
0105 900000      R     MOV     DPTR,#ucFunctionCode
0108 E0                MOVX    A,@DPTR
0109 FD                MOV     R5,A
010A 900000      R     MOV     DPTR,#i
010D E0                MOVX    A,@DPTR
010E FE                MOV     R6,A
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
0112 EF                MOV     A,R7
0113 7802              MOV     R0,#02H
0115         ?C0080:
0115 C3                CLR     C
0116 33                RLC     A
0117 CE                XCH     A,R6
0118 33                RLC     A
0119 CE                XCH     A,R6
011A D8F9              DJNZ    R0,?C0080
011C FF                MOV     R7,A
011D 7400        R     MOV     A,#LOW xFuncHandlers
011F 2F                ADD     A,R7
0120 F582              MOV     DPL,A
0122 7400        R     MOV     A,#HIGH xFuncHandlers
0124 3E                ADDC    A,R6
0125 F583              MOV     DPH,A
0127 ED                MOV     A,R5
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
0129 900000      R     MOV     DPTR,#pxHandler
012C E0                MOVX    A,@DPTR
012D FB                MOV     R3,A
012E A3                INC     DPTR
012F E0                MOVX    A,@DPTR
0130 FA                MOV     R2,A
0131 A3                INC     DPTR
0132 E0                MOVX    A,@DPTR
0133 F9                MOV     R1,A
0134 900000      R     MOV     DPTR,#i
0137 E0                MOVX    A,@DPTR
0138 FE                MOV     R6,A
0139 A3                INC     DPTR
013A E0                MOVX    A,@DPTR
013B FF                MOV     R7,A
013C EF                MOV     A,R7
013D 7802              MOV     R0,#02H
013F         ?C0081:
013F C3                CLR     C
0140 33                RLC     A
0141 CE                XCH     A,R6
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 18  

0142 33                RLC     A
0143 CE                XCH     A,R6
0144 D8F9              DJNZ    R0,?C0081
0146 FF                MOV     R7,A
0147 7400        R     MOV     A,#LOW xFuncHandlers+01H
0149 2F                ADD     A,R7
014A F582              MOV     DPL,A
014C 7400        R     MOV     A,#HIGH xFuncHandlers+01H
014E 3E                ADDC    A,R6
014F F583              MOV     DPH,A
0151 EB                MOV     A,R3
0152 F0                MOVX    @DPTR,A
0153 A3                INC     DPTR
0154 EA                MOV     A,R2
0155 F0                MOVX    @DPTR,A
0156 A3                INC     DPTR
0157 E9                MOV     A,R1
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
0159 8011              SJMP    ?C0015
                                           ; SOURCE LINE # 244
015B         ?C0017:
                                           ; SOURCE LINE # 245
015B         ?C0016:
015B 900000      R     MOV     DPTR,#i+01H
015E E0                MOVX    A,@DPTR
015F 04                INC     A
0160 F0                MOVX    @DPTR,A
0161 7006              JNZ     ?C0082
0163 900000      R     MOV     DPTR,#i
0166 E0                MOVX    A,@DPTR
0167 04                INC     A
0168 F0                MOVX    @DPTR,A
0169         ?C0082:
0169 020000      R     LJMP    ?C0014
016C         ?C0015:
                                           ; SOURCE LINE # 246
016C 900000      R     MOV     DPTR,#i
016F E0                MOVX    A,@DPTR
0170 FE                MOV     R6,A
0171 A3                INC     DPTR
0172 E0                MOVX    A,@DPTR
0173 FF                MOV     R7,A
0174 EF                MOV     A,R7
0175 6406              XRL     A,#06H
0177 4E                ORL     A,R6
0178 6004              JZ      ?C0019
017A 7F00              MOV     R7,#00H
017C 8002              SJMP    ?C0020
017E         ?C0019:
017E 7F04              MOV     R7,#04H
0180         ?C0020:
0180 900000      R     MOV     DPTR,#eStatus
0183 EF                MOV     A,R7
0184 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0185 020000      R     LJMP    ?C0021
0188         ?C0013:
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
0188 900000      R     MOV     DPTR,#i
018B E4                CLR     A
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 19  

018C F0                MOVX    @DPTR,A
018D A3                INC     DPTR
018E E4                CLR     A
018F F0                MOVX    @DPTR,A
0190         ?C0022:
0190 900000      R     MOV     DPTR,#i
0193 E0                MOVX    A,@DPTR
0194 FE                MOV     R6,A
0195 A3                INC     DPTR
0196 E0                MOVX    A,@DPTR
0197 FF                MOV     R7,A
0198 C3                CLR     C
0199 EF                MOV     A,R7
019A 9406              SUBB    A,#06H
019C EE                MOV     A,R6
019D 6480              XRL     A,#080H
019F 9480              SUBB    A,#080H
01A1 4003              JC      $ + 5H
01A3 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
01A6 900000      R     MOV     DPTR,#i
01A9 E0                MOVX    A,@DPTR
01AA FE                MOV     R6,A
01AB A3                INC     DPTR
01AC E0                MOVX    A,@DPTR
01AD FF                MOV     R7,A
01AE EF                MOV     A,R7
01AF 7802              MOV     R0,#02H
01B1         ?C0083:
01B1 C3                CLR     C
01B2 33                RLC     A
01B3 CE                XCH     A,R6
01B4 33                RLC     A
01B5 CE                XCH     A,R6
01B6 D8F9              DJNZ    R0,?C0083
01B8 FF                MOV     R7,A
01B9 7400        R     MOV     A,#LOW xFuncHandlers
01BB 2F                ADD     A,R7
01BC F582              MOV     DPL,A
01BE 7400        R     MOV     A,#HIGH xFuncHandlers
01C0 3E                ADDC    A,R6
01C1 F583              MOV     DPH,A
01C3 E0                MOVX    A,@DPTR
01C4 FF                MOV     R7,A
01C5 900000      R     MOV     DPTR,#ucFunctionCode
01C8 E0                MOVX    A,@DPTR
01C9 FE                MOV     R6,A
01CA EF                MOV     A,R7
01CB B5064C            CJNE    A,AR6,?C0024
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
01CE 900000      R     MOV     DPTR,#i
01D1 E0                MOVX    A,@DPTR
01D2 FE                MOV     R6,A
01D3 A3                INC     DPTR
01D4 E0                MOVX    A,@DPTR
01D5 FF                MOV     R7,A
01D6 EF                MOV     A,R7
01D7 7802              MOV     R0,#02H
01D9         ?C0084:
01D9 C3                CLR     C
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 20  

01DA 33                RLC     A
01DB CE                XCH     A,R6
01DC 33                RLC     A
01DD CE                XCH     A,R6
01DE D8F9              DJNZ    R0,?C0084
01E0 FF                MOV     R7,A
01E1 7400        R     MOV     A,#LOW xFuncHandlers
01E3 2F                ADD     A,R7
01E4 F582              MOV     DPL,A
01E6 7400        R     MOV     A,#HIGH xFuncHandlers
01E8 3E                ADDC    A,R6
01E9 F583              MOV     DPH,A
01EB E4                CLR     A
01EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
01ED 7B00              MOV     R3,#00H
01EF 7A00              MOV     R2,#00H
01F1 7900              MOV     R1,#00H
01F3 900000      R     MOV     DPTR,#i
01F6 E0                MOVX    A,@DPTR
01F7 FE                MOV     R6,A
01F8 A3                INC     DPTR
01F9 E0                MOVX    A,@DPTR
01FA FF                MOV     R7,A
01FB EF                MOV     A,R7
01FC 7802              MOV     R0,#02H
01FE         ?C0085:
01FE C3                CLR     C
01FF 33                RLC     A
0200 CE                XCH     A,R6
0201 33                RLC     A
0202 CE                XCH     A,R6
0203 D8F9              DJNZ    R0,?C0085
0205 FF                MOV     R7,A
0206 7400        R     MOV     A,#LOW xFuncHandlers+01H
0208 2F                ADD     A,R7
0209 F582              MOV     DPL,A
020B 7400        R     MOV     A,#HIGH xFuncHandlers+01H
020D 3E                ADDC    A,R6
020E F583              MOV     DPH,A
0210 EB                MOV     A,R3
0211 F0                MOVX    @DPTR,A
0212 A3                INC     DPTR
0213 EA                MOV     A,R2
0214 F0                MOVX    @DPTR,A
0215 A3                INC     DPTR
0216 E9                MOV     A,R1
0217 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0218 8011              SJMP    ?C0023
                                           ; SOURCE LINE # 257
021A         ?C0025:
                                           ; SOURCE LINE # 258
021A         ?C0024:
021A 900000      R     MOV     DPTR,#i+01H
021D E0                MOVX    A,@DPTR
021E 04                INC     A
021F F0                MOVX    @DPTR,A
0220 7006              JNZ     ?C0086
0222 900000      R     MOV     DPTR,#i
0225 E0                MOVX    A,@DPTR
0226 04                INC     A
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 21  

0227 F0                MOVX    @DPTR,A
0228         ?C0086:
0228 020000      R     LJMP    ?C0022
022B         ?C0023:
                                           ; SOURCE LINE # 260
022B 900000      R     MOV     DPTR,#eStatus
022E E4                CLR     A
022F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
0230         ?C0021:
                                           ; SOURCE LINE # 262
0230 D2AF              SETB    EA
                                           ; SOURCE LINE # 263
0232 8006              SJMP    ?C0026
0234         ?C0012:
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0234 900000      R     MOV     DPTR,#eStatus
0237 7402              MOV     A,#02H
0239 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
023A         ?C0026:
                                           ; SOURCE LINE # 268
023A 900000      R     MOV     DPTR,#eStatus
023D E0                MOVX    A,@DPTR
023E FF                MOV     R7,A
                                           ; SOURCE LINE # 269
023F         ?C0027:
023F 22                RET     
             ; FUNCTION _eMBRegisterCB (END)

             ; FUNCTION eMBClose (BEGIN)
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
0000 900000      R     MOV     DPTR,#eStatus
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
0005 900000      R     MOV     DPTR,#eMBState
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B B4013A            CJNE    A,#01H,?C0028
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
000E 7B00              MOV     R3,#00H
0010 7A00              MOV     R2,#00H
0012 7900              MOV     R1,#00H
0014 C003              PUSH    AR3
0016 C002              PUSH    AR2
0018 C001              PUSH    AR1
001A 900000      R     MOV     DPTR,#pvMBFrameCloseCur
001D E0                MOVX    A,@DPTR
001E FB                MOV     R3,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 FA                MOV     R2,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 F9                MOV     R1,A
0025 D082              POP     DPL
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 22  

0027 D083              POP     DPH
0029 D0E0              POP     ACC
002B 6B                XRL     A,R3
002C 7008              JNZ     ?C0087
002E E9                MOV     A,R1
002F 6582              XRL     A,DPL
0031 7003              JNZ     ?C0087
0033 EA                MOV     A,R2
0034 6583              XRL     A,DPH
0036         ?C0087:
0036 6016              JZ      ?C0030
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0038 900000      R     MOV     DPTR,#pvMBFrameCloseCur
003B E0                MOVX    A,@DPTR
003C FB                MOV     R3,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FA                MOV     R2,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 F9                MOV     R1,A
0043 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 282
0046         ?C0029:
                                           ; SOURCE LINE # 283
0046 8006              SJMP    ?C0030
0048         ?C0028:
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
0048 900000      R     MOV     DPTR,#eStatus
004B 7406              MOV     A,#06H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
004E         ?C0030:
                                           ; SOURCE LINE # 288
004E 900000      R     MOV     DPTR,#eStatus
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
                                           ; SOURCE LINE # 289
0053         ?C0031:
0053 22                RET     
             ; FUNCTION eMBClose (END)

             ; FUNCTION eMBEnable (BEGIN)
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
0000 900000      R     MOV     DPTR,#eStatus
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0005 900000      R     MOV     DPTR,#eMBState
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B B40120            CJNE    A,#01H,?C0032
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 300
000E 900000      R     MOV     DPTR,#eMBCurrentMode
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 23  

0013 EF                MOV     A,R7
0014 7005              JNZ     ?C0033
                                           ; SOURCE LINE # 301
0016 120000      E     LCALL   eMBRTUStart
                                           ; SOURCE LINE # 302
0019 800C              SJMP    ?C0034
001B         ?C0033:
001B 900000      R     MOV     DPTR,#eMBCurrentMode
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 B40103            CJNE    A,#01H,?C0034
                                           ; SOURCE LINE # 303
0024 120000      E     LCALL   eMBASCIIStart
                                           ; SOURCE LINE # 304
0027         ?C0035:
0027         ?C0034:
                                           ; SOURCE LINE # 305
0027 900000      R     MOV     DPTR,#eMBState
002A E4                CLR     A
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
002C 8006              SJMP    ?C0036
002E         ?C0032:
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
002E 900000      R     MOV     DPTR,#eStatus
0031 7406              MOV     A,#06H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
0034         ?C0036:
                                           ; SOURCE LINE # 311
0034 900000      R     MOV     DPTR,#eStatus
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
                                           ; SOURCE LINE # 312
0039         ?C0037:
0039 22                RET     
             ; FUNCTION eMBEnable (END)

             ; FUNCTION eMBDisable (BEGIN)
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 319
0000 900000      R     MOV     DPTR,#eMBState
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 701B              JNZ     ?C0038
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0008 900000      R     MOV     DPTR,#pvMBFrameStopCur
000B E0                MOVX    A,@DPTR
000C FB                MOV     R3,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FA                MOV     R2,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 F9                MOV     R1,A
0013 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 322
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 24  

0016 900000      R     MOV     DPTR,#eMBState
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
001C 900000      R     MOV     DPTR,#eStatus
001F E4                CLR     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0021 8016              SJMP    ?C0039
0023         ?C0038:
                                           ; SOURCE LINE # 325
0023 900000      R     MOV     DPTR,#eMBState
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 B40107            CJNE    A,#01H,?C0040
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
002C 900000      R     MOV     DPTR,#eStatus
002F E4                CLR     A
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
0031 8006              SJMP    ?C0039
0033         ?C0040:
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
0033 900000      R     MOV     DPTR,#eStatus
0036 7406              MOV     A,#06H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
0039         ?C0041:
0039         ?C0039:
                                           ; SOURCE LINE # 333
0039 900000      R     MOV     DPTR,#eStatus
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
                                           ; SOURCE LINE # 334
003E         ?C0042:
003E 22                RET     
             ; FUNCTION eMBDisable (END)

             ; FUNCTION eMBPoll (BEGIN)
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 348
0000 900000      R     MOV     DPTR,#eStatus
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
0005 900000      R     MOV     DPTR,#eMBState
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 6003              JZ      ?C0043
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
000D 7F06              MOV     R7,#06H
000F 22                RET     
                                           ; SOURCE LINE # 355
0010         ?C0043:
                                           ; SOURCE LINE # 359
0010 7B01              MOV     R3,#01H
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 25  

0012 7A00        R     MOV     R2,#HIGH eEvent
0014 7900        R     MOV     R1,#LOW eEvent
0016 120000      E     LCALL   _xMBPortEventGet
0019 EF                MOV     A,R7
001A 6401              XRL     A,#01H
001C 6003              JZ      $ + 5H
001E 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
0021 900000      R     MOV     DPTR,#eEvent
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 120000      E     LCALL   ?C?CCASE
002A 0000        R     DW      ?C0045
002C 00                DB      00H
002D 0000        R     DW      ?C0048
002F 01                DB      01H
0030 0000        R     DW      ?C0055
0032 02                DB      02H
0033 0000        R     DW      ?C0045
0035 03                DB      03H
0036 0000              DW      00H
0038 0000        R     DW      ?C0045
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
003A         ?C0047:
                                           ; SOURCE LINE # 364
003A 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 366
003D         ?C0048:
                                           ; SOURCE LINE # 370
003D 900000      R     MOV     DPTR,#eMBCurrentMode
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 7031              JNZ     ?C0049
                                           ; SOURCE LINE # 371
0045 7E00        R     MOV     R6,#HIGH ucRcvAddress
0047 7F00        R     MOV     R7,#LOW ucRcvAddress
0049 7B01              MOV     R3,#01H
004B 7A00        R     MOV     R2,#HIGH ucMBFrame
004D 7900        R     MOV     R1,#LOW ucMBFrame
004F C003              PUSH    AR3
0051 C002              PUSH    AR2
0053 C001              PUSH    AR1
0055 7B01              MOV     R3,#01H
0057 7A00        R     MOV     R2,#HIGH usLength
0059 7900        R     MOV     R1,#LOW usLength
005B 900000      E     MOV     DPTR,#?_eMBRTUReceive?BYTE+05H
005E EB                MOV     A,R3
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 EA                MOV     A,R2
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 E9                MOV     A,R1
0065 F0                MOVX    @DPTR,A
0066 D001              POP     AR1
0068 D002              POP     AR2
006A D003              POP     AR3
006C 120000      E     LCALL   _eMBRTUReceive
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 26  

006F 900000      R     MOV     DPTR,#eStatus
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
0074 8045              SJMP    ?C0050
0076         ?C0049:
0076 900000      R     MOV     DPTR,#eMBCurrentMode
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B EF                MOV     A,R7
007C B4013C            CJNE    A,#01H,?C0050
                                           ; SOURCE LINE # 377
007F 7B01              MOV     R3,#01H
0081 7A00        R     MOV     R2,#HIGH ucRcvAddress
0083 7900        R     MOV     R1,#LOW ucRcvAddress
0085 C003              PUSH    AR3
0087 C002              PUSH    AR2
0089 C001              PUSH    AR1
008B 7B01              MOV     R3,#01H
008D 7A00        R     MOV     R2,#HIGH ucMBFrame
008F 7900        R     MOV     R1,#LOW ucMBFrame
0091 900000      E     MOV     DPTR,#?_eMBASCIIReceive?BYTE+03H
0094 EB                MOV     A,R3
0095 F0                MOVX    @DPTR,A
0096 A3                INC     DPTR
0097 EA                MOV     A,R2
0098 F0                MOVX    @DPTR,A
0099 A3                INC     DPTR
009A E9                MOV     A,R1
009B F0                MOVX    @DPTR,A
009C 7B01              MOV     R3,#01H
009E 7A00        R     MOV     R2,#HIGH usLength
00A0 7900        R     MOV     R1,#LOW usLength
00A2 900000      E     MOV     DPTR,#?_eMBASCIIReceive?BYTE+06H
00A5 EB                MOV     A,R3
00A6 F0                MOVX    @DPTR,A
00A7 A3                INC     DPTR
00A8 EA                MOV     A,R2
00A9 F0                MOVX    @DPTR,A
00AA A3                INC     DPTR
00AB E9                MOV     A,R1
00AC F0                MOVX    @DPTR,A
00AD D001              POP     AR1
00AF D002              POP     AR2
00B1 D003              POP     AR3
00B3 120000      E     LCALL   _eMBASCIIReceive
00B6 900000      R     MOV     DPTR,#eStatus
00B9 EF                MOV     A,R7
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
00BB         ?C0051:
00BB         ?C0050:
                                           ; SOURCE LINE # 379
00BB 900000      R     MOV     DPTR,#eStatus
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 EF                MOV     A,R7
00C1 6003              JZ      $ + 5H
00C3 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 382
00C6 900000      R     MOV     DPTR,#ucMBAddress
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 27  

00C9 E0                MOVX    A,@DPTR
00CA FF                MOV     R7,A
00CB 900000      R     MOV     DPTR,#ucRcvAddress
00CE E0                MOVX    A,@DPTR
00CF FE                MOV     R6,A
00D0 EE                MOV     A,R6
00D1 6F                XRL     A,R7
00D2 600B              JZ      ?C0054
00D4 900000      R     MOV     DPTR,#ucRcvAddress
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 EF                MOV     A,R7
00DA 6003              JZ      $ + 5H
00DC 020000      R     LJMP    ?C0045
00DF         ?C0054:
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
00DF 7F02              MOV     R7,#02H
00E1 120000      E     LCALL   _xMBPortEventPost
                                           ; SOURCE LINE # 387
00E4         ?C0053:
                                           ; SOURCE LINE # 388
00E4         ?C0052:
                                           ; SOURCE LINE # 389
00E4 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 391
00E7         ?C0055:
                                           ; SOURCE LINE # 392
00E7 900000      R     MOV     DPTR,#ucMBFrame
00EA E0                MOVX    A,@DPTR
00EB FE                MOV     R6,A
00EC A3                INC     DPTR
00ED E0                MOVX    A,@DPTR
00EE FF                MOV     R7,A
00EF 8F82              MOV     DPL,R7
00F1 8E83              MOV     DPH,R6
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 900000      R     MOV     DPTR,#ucFunctionCode
00F8 EF                MOV     A,R7
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
00FA 900000      R     MOV     DPTR,#eException
00FD 7401              MOV     A,#01H
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
0100 900000      R     MOV     DPTR,#i
0103 E4                CLR     A
0104 F0                MOVX    @DPTR,A
0105 A3                INC     DPTR
0106 E4                CLR     A
0107 F0                MOVX    @DPTR,A
0108         ?C0056:
0108 900000      R     MOV     DPTR,#i
010B E0                MOVX    A,@DPTR
010C FE                MOV     R6,A
010D A3                INC     DPTR
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
0110 C3                CLR     C
0111 EF                MOV     A,R7
0112 9406              SUBB    A,#06H
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 28  

0114 EE                MOV     A,R6
0115 6480              XRL     A,#080H
0117 9480              SUBB    A,#080H
0119 4003              JC      $ + 5H
011B 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 397
011E 900000      R     MOV     DPTR,#i
0121 E0                MOVX    A,@DPTR
0122 FE                MOV     R6,A
0123 A3                INC     DPTR
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
0126 EF                MOV     A,R7
0127 7802              MOV     R0,#02H
0129         ?C0088:
0129 C3                CLR     C
012A 33                RLC     A
012B CE                XCH     A,R6
012C 33                RLC     A
012D CE                XCH     A,R6
012E D8F9              DJNZ    R0,?C0088
0130 FF                MOV     R7,A
0131 7400        R     MOV     A,#LOW xFuncHandlers
0133 2F                ADD     A,R7
0134 F582              MOV     DPL,A
0136 7400        R     MOV     A,#HIGH xFuncHandlers
0138 3E                ADDC    A,R6
0139 F583              MOV     DPH,A
013B E0                MOVX    A,@DPTR
013C FF                MOV     R7,A
013D EF                MOV     A,R7
013E 7006              JNZ     ?C0059
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0140 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 400
0143 020000      R     LJMP    ?C0058
0146         ?C0059:
                                           ; SOURCE LINE # 401
0146 900000      R     MOV     DPTR,#i
0149 E0                MOVX    A,@DPTR
014A FE                MOV     R6,A
014B A3                INC     DPTR
014C E0                MOVX    A,@DPTR
014D FF                MOV     R7,A
014E EF                MOV     A,R7
014F 7802              MOV     R0,#02H
0151         ?C0089:
0151 C3                CLR     C
0152 33                RLC     A
0153 CE                XCH     A,R6
0154 33                RLC     A
0155 CE                XCH     A,R6
0156 D8F9              DJNZ    R0,?C0089
0158 FF                MOV     R7,A
0159 7400        R     MOV     A,#LOW xFuncHandlers
015B 2F                ADD     A,R7
015C F582              MOV     DPL,A
015E 7400        R     MOV     A,#HIGH xFuncHandlers
0160 3E                ADDC    A,R6
0161 F583              MOV     DPH,A
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 29  

0163 E0                MOVX    A,@DPTR
0164 FF                MOV     R7,A
0165 900000      R     MOV     DPTR,#ucFunctionCode
0168 E0                MOVX    A,@DPTR
0169 FE                MOV     R6,A
016A EF                MOV     A,R7
016B 6E                XRL     A,R6
016C 6003              JZ      $ + 5H
016E 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 405
0171 900000      R     MOV     DPTR,#ucFunctionCode
0174 E0                MOVX    A,@DPTR
0175 FF                MOV     R7,A
0176 EF                MOV     A,R7
0177 120000      E     LCALL   ?C?CCASE
017A 0000        R     DW      ?C0064
017C 03                DB      03H
017D 0000        R     DW      ?C0063
017F 04                DB      04H
0180 0000        R     DW      ?C0066
0182 06                DB      06H
0183 0000        R     DW      ?C0065
0185 10                DB      010H
0186 0000              DW      00H
0188 0000        R     DW      ?C0057
                                           ; SOURCE LINE # 413
018A         ?C0063:
                                           ; SOURCE LINE # 415
018A 120000      E     LCALL   eMBFuncReadInputRegister
018D 900000      R     MOV     DPTR,#eException
0190 EF                MOV     A,R7
0191 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0192 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 422
0195         ?C0064:
                                           ; SOURCE LINE # 424
0195 900000      R     MOV     DPTR,#ucMBFrame
0198 E0                MOVX    A,@DPTR
0199 FE                MOV     R6,A
019A A3                INC     DPTR
019B E0                MOVX    A,@DPTR
019C FF                MOV     R7,A
019D 7C00        R     MOV     R4,#HIGH usLength
019F 7D00        R     MOV     R5,#LOW usLength
01A1 120000      E     LCALL   _eMBFuncReadHoldingRegister
01A4 900000      R     MOV     DPTR,#eException
01A7 EF                MOV     A,R7
01A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
01A9 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 428
01AC         ?C0065:
                                           ; SOURCE LINE # 430
01AC 900000      R     MOV     DPTR,#ucMBFrame
01AF E0                MOVX    A,@DPTR
01B0 FE                MOV     R6,A
01B1 A3                INC     DPTR
01B2 E0                MOVX    A,@DPTR
01B3 FF                MOV     R7,A
01B4 AA06              MOV     R2,AR6
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 30  

01B6 A907              MOV     R1,AR7
01B8 7B01              MOV     R3,#01H
01BA C003              PUSH    AR3
01BC C002              PUSH    AR2
01BE C001              PUSH    AR1
01C0 7B01              MOV     R3,#01H
01C2 7A00        R     MOV     R2,#HIGH usLength
01C4 7900        R     MOV     R1,#LOW usLength
01C6 900000      E     MOV     DPTR,#?_eMBFuncWriteMultipleHoldingRegister?BYTE+03H
01C9 EB                MOV     A,R3
01CA F0                MOVX    @DPTR,A
01CB A3                INC     DPTR
01CC EA                MOV     A,R2
01CD F0                MOVX    @DPTR,A
01CE A3                INC     DPTR
01CF E9                MOV     A,R1
01D0 F0                MOVX    @DPTR,A
01D1 D001              POP     AR1
01D3 D002              POP     AR2
01D5 D003              POP     AR3
01D7 120000      E     LCALL   _eMBFuncWriteMultipleHoldingRegister
01DA 900000      R     MOV     DPTR,#eException
01DD EF                MOV     A,R7
01DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
01DF 804A              SJMP    ?C0057
                                           ; SOURCE LINE # 434
01E1         ?C0066:
                                           ; SOURCE LINE # 436
01E1 900000      R     MOV     DPTR,#ucMBFrame
01E4 E0                MOVX    A,@DPTR
01E5 FE                MOV     R6,A
01E6 A3                INC     DPTR
01E7 E0                MOVX    A,@DPTR
01E8 FF                MOV     R7,A
01E9 AA06              MOV     R2,AR6
01EB A907              MOV     R1,AR7
01ED 7B01              MOV     R3,#01H
01EF C003              PUSH    AR3
01F1 C002              PUSH    AR2
01F3 C001              PUSH    AR1
01F5 7B01              MOV     R3,#01H
01F7 7A00        R     MOV     R2,#HIGH usLength
01F9 7900        R     MOV     R1,#LOW usLength
01FB 900000      E     MOV     DPTR,#?_eMBFuncWriteHoldingRegister?BYTE+03H
01FE EB                MOV     A,R3
01FF F0                MOVX    @DPTR,A
0200 A3                INC     DPTR
0201 EA                MOV     A,R2
0202 F0                MOVX    @DPTR,A
0203 A3                INC     DPTR
0204 E9                MOV     A,R1
0205 F0                MOVX    @DPTR,A
0206 D001              POP     AR1
0208 D002              POP     AR2
020A D003              POP     AR3
020C 120000      E     LCALL   _eMBFuncWriteHoldingRegister
020F 900000      R     MOV     DPTR,#eException
0212 EF                MOV     A,R7
0213 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
0214 8015              SJMP    ?C0057
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 31  

                                           ; SOURCE LINE # 469
0216         ?C0067:
                                           ; SOURCE LINE # 470
0216 8013              SJMP    ?C0057
                                           ; SOURCE LINE # 471
0218         ?C0062:
                                           ; SOURCE LINE # 473
0218 8011              SJMP    ?C0057
                                           ; SOURCE LINE # 474
021A         ?C0061:
021A         ?C0060:
                                           ; SOURCE LINE # 475
021A         ?C0058:
021A 900000      R     MOV     DPTR,#i+01H
021D E0                MOVX    A,@DPTR
021E 04                INC     A
021F F0                MOVX    @DPTR,A
0220 7006              JNZ     ?C0090
0222 900000      R     MOV     DPTR,#i
0225 E0                MOVX    A,@DPTR
0226 04                INC     A
0227 F0                MOVX    @DPTR,A
0228         ?C0090:
0228 020000      R     LJMP    ?C0056
022B         ?C0057:
                                           ; SOURCE LINE # 480
022B 900000      R     MOV     DPTR,#ucRcvAddress
022E E0                MOVX    A,@DPTR
022F FF                MOV     R7,A
0230 EF                MOV     A,R7
0231 7003              JNZ     $ + 5H
0233 020000      R     LJMP    ?C0045
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
0236 900000      R     MOV     DPTR,#eException
0239 E0                MOVX    A,@DPTR
023A FF                MOV     R7,A
023B EF                MOV     A,R7
023C 6070              JZ      ?C0069
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 485
023E 900000      R     MOV     DPTR,#usLength
0241 E4                CLR     A
0242 F0                MOVX    @DPTR,A
0243 A3                INC     DPTR
0244 E4                CLR     A
0245 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 486
0246 900000      R     MOV     DPTR,#ucFunctionCode
0249 E0                MOVX    A,@DPTR
024A FF                MOV     R7,A
024B EF                MOV     A,R7
024C 4480              ORL     A,#080H
024E FF                MOV     R7,A
024F 900000      R     MOV     DPTR,#ucMBFrame
0252 E0                MOVX    A,@DPTR
0253 FC                MOV     R4,A
0254 A3                INC     DPTR
0255 E0                MOVX    A,@DPTR
0256 FD                MOV     R5,A
0257 8D82              MOV     DPL,R5
0259 8C83              MOV     DPH,R4
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 32  

025B C083              PUSH    DPH
025D C082              PUSH    DPL
025F 900000      R     MOV     DPTR,#usLength
0262 E4                CLR     A
0263 75F001            MOV     B,#01H
0266 120000      E     LCALL   ?C?ILDIX
0269 ADF0              MOV     R5,B
026B FC                MOV     R4,A
026C D082              POP     DPL
026E D083              POP     DPH
0270 E582              MOV     A,DPL
0272 2D                ADD     A,R5
0273 F582              MOV     DPL,A
0275 E583              MOV     A,DPH
0277 3C                ADDC    A,R4
0278 F583              MOV     DPH,A
027A EF                MOV     A,R7
027B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
027C 900000      R     MOV     DPTR,#eException
027F E0                MOVX    A,@DPTR
0280 FF                MOV     R7,A
0281 900000      R     MOV     DPTR,#ucMBFrame
0284 E0                MOVX    A,@DPTR
0285 FC                MOV     R4,A
0286 A3                INC     DPTR
0287 E0                MOVX    A,@DPTR
0288 FD                MOV     R5,A
0289 8D82              MOV     DPL,R5
028B 8C83              MOV     DPH,R4
028D C083              PUSH    DPH
028F C082              PUSH    DPL
0291 900000      R     MOV     DPTR,#usLength
0294 E4                CLR     A
0295 75F001            MOV     B,#01H
0298 120000      E     LCALL   ?C?ILDIX
029B ADF0              MOV     R5,B
029D FC                MOV     R4,A
029E D082              POP     DPL
02A0 D083              POP     DPH
02A2 E582              MOV     A,DPL
02A4 2D                ADD     A,R5
02A5 F582              MOV     DPL,A
02A7 E583              MOV     A,DPH
02A9 3C                ADDC    A,R4
02AA F583              MOV     DPH,A
02AC EF                MOV     A,R7
02AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 489
02AE         ?C0069:
                                           ; SOURCE LINE # 490
02AE 900000      R     MOV     DPTR,#eMBCurrentMode
02B1 E0                MOVX    A,@DPTR
02B2 FF                MOV     R7,A
02B3 EF                MOV     A,R7
02B4 B40109            CJNE    A,#01H,?C0070
02B7 8007              SJMP    ?C0070
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
02B9 7F00              MOV     R7,#00H
02BB 7E00              MOV     R6,#00H
02BD 120000      E     LCALL   _vMBPortTimersDelay
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 33  

                                           ; SOURCE LINE # 493
02C0         ?C0070:
                                           ; SOURCE LINE # 495
02C0 900000      R     MOV     DPTR,#eMBCurrentMode
02C3 E0                MOVX    A,@DPTR
02C4 FF                MOV     R7,A
02C5 EF                MOV     A,R7
02C6 702D              JNZ     ?C0071
                                           ; SOURCE LINE # 497
02C8 900000      R     MOV     DPTR,#ucMBAddress
02CB E0                MOVX    A,@DPTR
02CC FF                MOV     R7,A
02CD 900000      R     MOV     DPTR,#ucMBFrame
02D0 E0                MOVX    A,@DPTR
02D1 FC                MOV     R4,A
02D2 A3                INC     DPTR
02D3 E0                MOVX    A,@DPTR
02D4 FD                MOV     R5,A
02D5 AA04              MOV     R2,AR4
02D7 A905              MOV     R1,AR5
02D9 7B01              MOV     R3,#01H
02DB 900000      R     MOV     DPTR,#usLength
02DE E0                MOVX    A,@DPTR
02DF FC                MOV     R4,A
02E0 A3                INC     DPTR
02E1 E0                MOVX    A,@DPTR
02E2 FD                MOV     R5,A
02E3 900000      E     MOV     DPTR,#?_eMBRTUSend?BYTE+04H
02E6 EC                MOV     A,R4
02E7 F0                MOVX    @DPTR,A
02E8 A3                INC     DPTR
02E9 ED                MOV     A,R5
02EA F0                MOVX    @DPTR,A
02EB 120000      E     LCALL   _eMBRTUSend
02EE 900000      R     MOV     DPTR,#eStatus
02F1 EF                MOV     A,R7
02F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
02F3 8034              SJMP    ?C0045
02F5         ?C0071:
02F5 900000      R     MOV     DPTR,#eMBCurrentMode
02F8 E0                MOVX    A,@DPTR
02F9 FF                MOV     R7,A
02FA EF                MOV     A,R7
02FB B4012B            CJNE    A,#01H,?C0045
                                           ; SOURCE LINE # 499
02FE 900000      R     MOV     DPTR,#ucMBAddress
0301 E0                MOVX    A,@DPTR
0302 FF                MOV     R7,A
0303 900000      R     MOV     DPTR,#ucMBFrame
0306 E0                MOVX    A,@DPTR
0307 FC                MOV     R4,A
0308 A3                INC     DPTR
0309 E0                MOVX    A,@DPTR
030A FD                MOV     R5,A
030B AA04              MOV     R2,AR4
030D A905              MOV     R1,AR5
030F 7B01              MOV     R3,#01H
0311 900000      R     MOV     DPTR,#usLength
0314 E0                MOVX    A,@DPTR
0315 FC                MOV     R4,A
0316 A3                INC     DPTR
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 34  

0317 E0                MOVX    A,@DPTR
0318 FD                MOV     R5,A
0319 900000      E     MOV     DPTR,#?_eMBASCIISend?BYTE+04H
031C EC                MOV     A,R4
031D F0                MOVX    @DPTR,A
031E A3                INC     DPTR
031F ED                MOV     A,R5
0320 F0                MOVX    @DPTR,A
0321 120000      E     LCALL   _eMBASCIISend
0324 900000      R     MOV     DPTR,#eStatus
0327 EF                MOV     A,R7
0328 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
0329         ?C0073:
0329         ?C0072:
                                           ; SOURCE LINE # 501
0329         ?C0068:
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 504
0329         ?C0074:
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
0329         ?C0046:
                                           ; SOURCE LINE # 507
0329         ?C0045:
                                           ; SOURCE LINE # 508
0329 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 509
032B         ?C0044:
032B 22                RET     
             ; FUNCTION eMBPoll (END)

C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 35  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_eMBRTUSend. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
eMBErrorCode . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
eMBRTUStart. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
EV_FRAME_SENT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ULONG. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
ADCSTAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
_eMBRTUInit. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
pxMBFunctionHandler. . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
eMBASCIIStop . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
pvMBFrameCloseCur. . . . . . . . . . .  STATIC   XDATA  PTR      0007H  3
_eMBInit . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  eMode. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ucSlaveAddress . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ucPort . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  ulBaudRate . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0003H  4
  eParity. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0008H  1
MB_PAR_ODD . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
pvMBFrameStop. . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
eMBPoll. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucMBFrame. . . . . . . . . . . . . .  STATIC   XDATA  PTR      0000H  2
  ucRcvAddress . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0002H  1
  ucFunctionCode . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0003H  1
  usLength . . . . . . . . . . . . . .  STATIC   XDATA  U_INT    0004H  2
  eException . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0006H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0000H  2
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  eEvent . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
MB_EX_SLAVE_BUSY . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EV_EXECUTE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SHORT. . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
EV_FRAME_RECEIVED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_ACKNOWLEDGE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
xMBFunctionHandler . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  ucFunctionCode . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  pxHandler. . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
_eMBFuncReadHoldingRegister. . . . . .  EXTERN   CODE   PROC     -----  -----
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
MB_EX_GATEWAY_PATH_FAILED. . . . . . .  E_CONST  -----  U_CHAR   -----  1
_vMBPortTimersDelay. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
eMBRTUStop . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MB_EILLSTATE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
peMBFrameReceive . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
STATE_DISABLED . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_NONE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CHAR . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
eMBEventType . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
I2CCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
MB_ETIMEDOUT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
vMBPortClose . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_eMBFuncWriteHoldingRegister . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 36  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_eMBASCIIReceive . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
eMBException . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
BOOL . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
eMBDisable . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
MB_EINVAL. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LONG . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
MB_ENOREG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
pxMBFrameCBByteReceived. . . . . . . .  PUBLIC   XDATA  PTR      000AH  3
ucMBAddress. . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   000DH  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
MB_EX_ILLEGAL_FUNCTION . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
_eMBRTUReceive . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
pvMBFrameStopCur . . . . . . . . . . .  STATIC   XDATA  PTR      000EH  3
MB_REG_WRITE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ENOERR. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
xFuncHandlers. . . . . . . . . . . . .  STATIC   XDATA  ARRAY    0011H  24
MB_ENORES. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBEnable. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_eMBRegisterCB . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucFunctionCode . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  pxHandler. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  3
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0004H  2
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
MB_EX_ILLEGAL_DATA_VALUE . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBRegisterMode. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
pxMBFrameCBReceiveFSMCur . . . . . . .  PUBLIC   XDATA  PTR      0029H  3
MB_REG_READ. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EIO . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
xMBPortEventInit . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPICON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
MB_EX_ILLEGAL_DATA_ADDRESS . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_ENABLED. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_TCP . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_xMBPortEventGet . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
pxMBFrameCBTransmitFSMCur. . . . . . .  PUBLIC   XDATA  PTR      002CH  3
MB_ASCII . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_GATEWAY_TGT_FAILED . . . . . . .  E_CONST  -----  U_CHAR   -----  1
pvMBFrameClose . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
_xMBPortEventPost. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
peMBFrameSend. . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
eMBFuncReadInputRegister . . . . . . .  EXTERN   CODE   PROC     -----  -----
MB_PAR_EVEN. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBCurrentMode . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   002FH  1
MB_PAR_NONE. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EPORTERR. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
USHORT . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
MB_EX_SLAVE_DEVICE_FAILURE . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_RTU . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_eMBASCIISend. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
eMBClose . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
STATE_NOT_INITIALIZED. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   MB                                                                    06/19/2014 17:11:56 PAGE 37  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


eMBASCIIStart. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MB_EX_MEMORY_PARITY_ERROR. . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBParity. . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
EV_READY . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UCHAR. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
pvMBFrameStart . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
_eMBASCIIInit. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
eMBState . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0030H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
_eMBFuncWriteMultipleHoldingRegister .  EXTERN   CODE   PROC     -----  -----
eMBMode. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1915    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     72    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
