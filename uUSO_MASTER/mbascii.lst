C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MBASCII
OBJECT MODULE PLACED IN mbascii.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE modbus\ascii\mbascii.c LARGE OPTIMIZE(0,SPEED) BROWSE MODAB2 
                    -INCDIR(.\modbus\include;.\modbus;.\port;.\modbus\ascii;.\modbus\rtu;..\uUSO_MASTER) DEBUG OBJECTEXTEND CODE SYMBOLS PRIN
                    -T(.\mbascii.lst) OBJECT(mbascii.obj)

line level    source

   1          /* 
   2           * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3           * Copyright (c) 2006 Christian Walter <wolti@sil.at>
   4           * All rights reserved.
   5           *
   6           * Redistribution and use in source and binary forms, with or without
   7           * modification, are permitted provided that the following conditions
   8           * are met:
   9           * 1. Redistributions of source code must retain the above copyright
  10           *    notice, this list of conditions and the following disclaimer.
  11           * 2. Redistributions in binary form must reproduce the above copyright
  12           *    notice, this list of conditions and the following disclaimer in the
  13           *    documentation and/or other materials provided with the distribution.
  14           * 3. The name of the author may not be used to endorse or promote products
  15           *    derived from this software without specific prior written permission.
  16           *
  17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20           * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23           * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24           * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26           * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27           *
  28           * File: $Id: mbascii.c,v 1.17 2010/06/06 13:47:07 wolti Exp $
  29           */
  30          
  31          /* ----------------------- System includes ----------------------------------*/
  32          #include "stdlib.h"
  33          #include "string.h"
  34          
  35          /* ----------------------- Platform includes --------------------------------*/
  36          #include "port.h"
  37          
  38          /* ----------------------- Modbus includes ----------------------------------*/
  39          #include "mb.h"
*** WARNING C258 IN LINE 41 OF .\MODBUS\RTU\MBRTU.H: 'pucFrame': mspace on parameter ignored
*** WARNING C258 IN LINE 41 OF .\MODBUS\RTU\MBRTU.H: 'pusLength': mspace on parameter ignored
  40          #include "mbconfig.h"
  41          #include "mbascii.h"
  42          #include "mbframe.h"
  43          
  44          #include "mbcrc.h"
  45          #include "mbport.h"
  46          
  47          #if MB_ASCII_ENABLED > 0
  48          
  49          /* ----------------------- Defines ------------------------------------------*/
  50          #define MB_ASCII_DEFAULT_CR     '\r'    /*!< Default CR character for Modbus ASCII. */
  51          #define MB_ASCII_DEFAULT_LF     '\n'    /*!< Default LF character for Modbus ASCII. */
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 2   

  52          #define MB_SER_PDU_SIZE_MIN     3       /*!< Minimum size of a Modbus ASCII frame. */
  53          #define MB_SER_PDU_SIZE_MAX     256     /*!< Maximum size of a Modbus ASCII frame. */
  54          #define MB_SER_PDU_SIZE_LRC     1       /*!< Size of LRC field in PDU. */
  55          #define MB_SER_PDU_ADDR_OFF     0       /*!< Offset of slave address in Ser-PDU. */
  56          #define MB_SER_PDU_PDU_OFF      1       /*!< Offset of Modbus-PDU in Ser-PDU. */
  57          
  58          /* ----------------------- Type definitions ---------------------------------*/
  59          typedef enum
  60          {
  61              STATE_RX_IDLE,              /*!< Receiver is in idle state. */
  62              STATE_RX_RCV,               /*!< Frame is beeing received. */
  63              STATE_RX_WAIT_EOF           /*!< Wait for End of Frame. */
  64          } eMBRcvState;
  65          
  66          typedef enum
  67          {
  68              STATE_TX_IDLE,              /*!< Transmitter is in idle state. */
  69              STATE_TX_START,             /*!< Starting transmission (':' sent). */
  70              STATE_TX_DATA,              /*!< Sending of data (Address, Data, LRC). */
  71              STATE_TX_END,               /*!< End of transmission. */
  72              STATE_TX_NOTIFY             /*!< Notify sender that the frame has been sent. */
  73          } eMBSndState;
  74          
  75          typedef enum
  76          {
  77              BYTE_HIGH_NIBBLE,           /*!< Character for high nibble of byte. */
  78              BYTE_LOW_NIBBLE             /*!< Character for low nibble of byte. */
  79          } eMBBytePos;
  80          
  81          /* ----------------------- Static functions ---------------------------------*/
  82          static UCHAR    prvucMBCHAR2BIN( UCHAR ucCharacter );
  83          
  84          static UCHAR    prvucMBBIN2CHAR( UCHAR ucByte );
  85          
  86          static UCHAR    prvucMBLRC( UCHAR * pucFrame, USHORT usLen );
  87          
  88          /* ----------------------- Static variables ---------------------------------*/
  89          static volatile eMBSndState eSndState;
  90          static volatile eMBRcvState eRcvState;
  91          
  92          /* We reuse the Modbus RTU buffer because only one buffer is needed and the
  93           * RTU buffer is bigger. */
  94          extern volatile UCHAR ucRTUBuf[];
  95          static volatile UCHAR *ucASCIIBuf = ucRTUBuf;
  96          
  97          static volatile USHORT usRcvBufferPos;
  98          static volatile eMBBytePos eBytePos;
  99          
 100          static volatile UCHAR *pucSndBufferCur;
 101          static volatile USHORT usSndBufferCount;
 102          
 103          static volatile UCHAR ucLRC;
 104          static volatile UCHAR ucMBLFCharacter;
 105          
 106          /* ----------------------- Start implementation -----------------------------*/
 107          eMBErrorCode
 108          eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
 109          {
 110   1          eMBErrorCode    eStatus = MB_ENOERR;
 111   1          ( void )ucSlaveAddress;
*** WARNING C275 IN LINE 111 OF MODBUS\ASCII\MBASCII.C: expression with possibly no effect
 112   1          
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 3   

 113   1          ENTER_CRITICAL_SECTION(  );
 114   1          ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
 115   1      
 116   1          if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
 117   1          {
 118   2              eStatus = MB_EPORTERR;
 119   2          }
 120   1          else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
 121   1          {
 122   2              eStatus = MB_EPORTERR;
 123   2          }
 124   1      
 125   1          EXIT_CRITICAL_SECTION(  );
 126   1              eSndState = STATE_TX_IDLE;
 127   1      
 128   1          return eStatus;
 129   1      }
 130          
 131          void
 132          eMBASCIIStart( void )
 133          {
 134   1          ENTER_CRITICAL_SECTION(  );
 135   1          vMBPortSerialEnable( TRUE, FALSE );
 136   1          eRcvState = STATE_RX_IDLE;
 137   1          EXIT_CRITICAL_SECTION(  );
 138   1      
 139   1          /* No special startup required for ASCII. */
 140   1          ( void )xMBPortEventPost( EV_READY );
 141   1      }
 142          
 143          void
 144          eMBASCIIStop( void )
 145          {
 146   1          ENTER_CRITICAL_SECTION(  );
 147   1          vMBPortSerialEnable( FALSE, FALSE );
 148   1          vMBPortTimersDisable(  );
 149   1          EXIT_CRITICAL_SECTION(  );
 150   1      }
 151          
 152          eMBErrorCode
 153          eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
 154          {
 155   1          eMBErrorCode    eStatus = MB_ENOERR;
 156   1      
 157   1          ENTER_CRITICAL_SECTION(  );
 158   1          assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 159   1      
 160   1          /* Length and CRC check */
 161   1          if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 162   1              && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
 163   1          {     
 164   2              /* Save the address field. All frames are passed to the upper layed
 165   2               * and the decision if a frame is used is done there.
 166   2               */
 167   2              *pucRcvAddress = ucASCIIBuf[MB_SER_PDU_ADDR_OFF];
 168   2      
 169   2              /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
 170   2               * size of address field and CRC checksum.
 171   2               */
 172   2              *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );
 173   2      
 174   2              /* Return the start of the Modbus PDU to the caller. */
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 4   

 175   2              *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
 176   2          }
 177   1          else
 178   1          {
 179   2              eStatus = MB_EIO;
 180   2          }
 181   1          EXIT_CRITICAL_SECTION(  );
 182   1          return eStatus;
 183   1      }
 184          
 185          eMBErrorCode
 186          eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
 187          {
 188   1          eMBErrorCode    eStatus = MB_ENOERR;
 189   1          UCHAR           usLRC;
 190   1      
 191   1          ENTER_CRITICAL_SECTION(  );
 192   1          /* Check if the receiver is still in idle state. If not we where too
 193   1           * slow with processing the received frame and the master sent another
 194   1           * frame on the network. We have to abort sending the frame.
 195   1           */
 196   1          if( eRcvState == STATE_RX_IDLE )
 197   1          {
 198   2              /* First byte before the Modbus-PDU is the slave address. */
 199   2              pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 200   2              usSndBufferCount = 1;
 201   2      
 202   2              /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
 203   2              pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 204   2              usSndBufferCount += usLength;
 205   2      
 206   2              /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
 207   2              usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 208   2              ucASCIIBuf[usSndBufferCount++] = usLRC;
 209   2      
 210   2              /* Activate the transmitter. */
 211   2              eSndState = STATE_TX_START;
 212   2              vMBPortSerialEnable( FALSE, TRUE );
 213   2                      xMBASCIITransmitFSM();
 214   2          }
 215   1          else
 216   1          {
 217   2              eStatus = MB_EIO;
 218   2          }
 219   1          EXIT_CRITICAL_SECTION(  );
 220   1          return eStatus;
 221   1      }
 222          
 223          BOOL
 224          xMBASCIIReceiveFSM( void ) reentrant
 225          {
 226   1          BOOL            xNeedPoll = FALSE;
 227   1          UCHAR           ucByte;
 228   1          UCHAR           ucResult;
 229   1      
 230   1          assert( eSndState == STATE_TX_IDLE );
 231   1      
 232   1          ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 233   1          switch ( eRcvState )
 234   1          {
 235   2              /* A new character is received. If the character is a ':' the input
 236   2               * buffer is cleared. A CR-character signals the end of the data
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 5   

 237   2               * block. Other characters are part of the data block and their
 238   2               * ASCII value is converted back to a binary representation.
 239   2               */
 240   2          case STATE_RX_RCV:
 241   2              /* Enable timer for character timeout. */
 242   2              vMBPortTimersEnable(  );
 243   2              if( ucByte == ':' )
 244   2              {
 245   3                  /* Empty receive buffer. */
 246   3                  eBytePos = BYTE_HIGH_NIBBLE;
 247   3                  usRcvBufferPos = 0;
 248   3              }
 249   2              else if( ucByte == MB_ASCII_DEFAULT_CR )
 250   2              {
 251   3                  eRcvState = STATE_RX_WAIT_EOF;
 252   3              }
 253   2              else
 254   2              {
 255   3                  ucResult = prvucMBCHAR2BIN( ucByte );
 256   3                  switch ( eBytePos )
 257   3                  {
 258   4                      /* High nibble of the byte comes first. We check for
 259   4                       * a buffer overflow here. */
 260   4                  case BYTE_HIGH_NIBBLE:
 261   4                      if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 262   4                      {
 263   5                          ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
 264   5                          eBytePos = BYTE_LOW_NIBBLE;
 265   5                          break;
 266   5                      }
 267   4                      else
 268   4                      {
 269   5                          /* not handled in Modbus specification but seems
 270   5                           * a resonable implementation. */
 271   5                          eRcvState = STATE_RX_IDLE;
 272   5                          /* Disable previously activated timer because of error state. */
 273   5                          vMBPortTimersDisable(  );
 274   5                      }
 275   4                      break;
 276   4      
 277   4                  case BYTE_LOW_NIBBLE:
 278   4                      ucASCIIBuf[usRcvBufferPos] |= ucResult;
 279   4                      usRcvBufferPos++;
 280   4                      eBytePos = BYTE_HIGH_NIBBLE;
 281   4                      break;
 282   4                  }
 283   3              }
 284   2              break;
 285   2      
 286   2          case STATE_RX_WAIT_EOF:
 287   2              if( ucByte == ucMBLFCharacter )
 288   2              {
 289   3                  /* Disable character timeout timer because all characters are
 290   3                   * received. */
 291   3                  vMBPortTimersDisable(  );
 292   3                  /* Receiver is again in idle state. */
 293   3                  eRcvState = STATE_RX_IDLE;
 294   3      
 295   3                  /* Notify the caller of eMBASCIIReceive that a new frame
 296   3                   * was received. */
 297   3                  xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 298   3              }
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 6   

 299   2              else if( ucByte == ':' )
 300   2              {
 301   3                  /* Empty receive buffer and back to receive state. */
 302   3                  eBytePos = BYTE_HIGH_NIBBLE;
 303   3                  usRcvBufferPos = 0;
 304   3                  eRcvState = STATE_RX_RCV;
 305   3      
 306   3                  /* Enable timer for character timeout. */
 307   3                  vMBPortTimersEnable(  );
 308   3              }
 309   2              else
 310   2              {
 311   3                  /* Frame is not okay. Delete entire frame. */
 312   3                  eRcvState = STATE_RX_IDLE;
 313   3              }
 314   2              break;
 315   2      
 316   2          case STATE_RX_IDLE:
 317   2              if( ucByte == ':' )
 318   2              {
 319   3                  /* Enable timer for character timeout. */
 320   3                  vMBPortTimersEnable(  );
 321   3                  /* Reset the input buffers to store the frame. */
 322   3                  usRcvBufferPos = 0;;
 323   3                  eBytePos = BYTE_HIGH_NIBBLE;
 324   3                  eRcvState = STATE_RX_RCV;
 325   3              }
 326   2              break;
 327   2          }
 328   1      
 329   1          return xNeedPoll;
 330   1      }
 331          
 332          BOOL
 333          xMBASCIITransmitFSM( void ) reentrant
 334          {
 335   1          BOOL            xNeedPoll = FALSE;
 336   1          UCHAR           ucByte;
 337   1      
 338   1          assert( eRcvState == STATE_RX_IDLE );
 339   1          switch ( eSndState )
 340   1          {
 341   2              /* Start of transmission. The start of a frame is defined by sending
 342   2               * the character ':'. */
 343   2          case STATE_TX_START:
 344   2              ucByte = ':';
 345   2              xMBPortSerialPutByte( ( CHAR )ucByte );
 346   2              eSndState = STATE_TX_DATA;
 347   2              eBytePos = BYTE_HIGH_NIBBLE;
 348   2              break;
 349   2      
 350   2              /* Send the data block. Each data byte is encoded as a character hex
 351   2               * stream with the high nibble sent first and the low nibble sent
 352   2               * last. If all data bytes are exhausted we send a '\r' character
 353   2               * to end the transmission. */
 354   2          case STATE_TX_DATA:
 355   2              if( usSndBufferCount > 0 )
 356   2              {
 357   3                  switch ( eBytePos )
 358   3                  {
 359   4                  case BYTE_HIGH_NIBBLE:
 360   4                      ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 7   

 361   4                      xMBPortSerialPutByte( ( CHAR ) ucByte );
 362   4                      eBytePos = BYTE_LOW_NIBBLE;
 363   4                      break;
 364   4      
 365   4                  case BYTE_LOW_NIBBLE:
 366   4                      ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
 367   4                      xMBPortSerialPutByte( ( CHAR )ucByte );
 368   4                      pucSndBufferCur++;
 369   4                      eBytePos = BYTE_HIGH_NIBBLE;
 370   4                      usSndBufferCount--;
 371   4                      break;
 372   4                  }
 373   3              }
 374   2              else
 375   2              {
 376   3                  xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
 377   3                  eSndState = STATE_TX_END;
 378   3              }
 379   2              break;
 380   2      
 381   2              /* Finish the frame by sending a LF character. */
 382   2          case STATE_TX_END:
 383   2              xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
 384   2              /* We need another state to make sure that the CR character has
 385   2               * been sent. */
 386   2              eSndState = STATE_TX_NOTIFY;
 387   2              break;
 388   2      
 389   2              /* Notify the task which called eMBASCIISend that the frame has
 390   2               * been sent. */
 391   2          case STATE_TX_NOTIFY:
 392   2              eSndState = STATE_TX_IDLE;
 393   2              xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 394   2      
 395   2              /* Disable transmitter. This prevents another transmit buffer
 396   2               * empty interrupt. */
 397   2              vMBPortSerialEnable( TRUE, FALSE );
 398   2              eSndState = STATE_TX_IDLE;
 399   2              break;
 400   2      
 401   2              /* We should not get a transmitter event if the transmitter is in
 402   2               * idle state.  */
 403   2          case STATE_TX_IDLE:
 404   2              /* enable receiver/disable transmitter. */
 405   2              vMBPortSerialEnable( TRUE, FALSE );
 406   2              break;
 407   2          }
 408   1      
 409   1          return xNeedPoll;
 410   1      }
 411          
 412          BOOL
 413          xMBASCIITimerT1SExpired( void ) reentrant
 414          {
 415   1          switch ( eRcvState )
 416   1          {
 417   2              /* If we have a timeout we go back to the idle state and wait for
 418   2               * the next frame.
 419   2               */
 420   2          case STATE_RX_RCV:
 421   2          case STATE_RX_WAIT_EOF:
 422   2              eRcvState = STATE_RX_IDLE;
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 8   

 423   2              break;
 424   2      
 425   2          default:
 426   2              assert( ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_WAIT_EOF ) ); 
 427   2              break;
 428   2          }
 429   1          vMBPortTimersDisable(  );
 430   1      
 431   1          /* no context switch required. */
 432   1          return FALSE;
 433   1      }
 434          
 435          
 436          static          UCHAR
 437          prvucMBCHAR2BIN( UCHAR ucCharacter )
 438          {
 439   1          if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
 440   1          {
 441   2              return ( UCHAR )( ucCharacter - '0' );
 442   2          }
 443   1          else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
 444   1          {
 445   2              return ( UCHAR )( ucCharacter - 'A' + 0x0A );
 446   2          }
 447   1          else
 448   1          {
 449   2              return 0xFF;
 450   2          }
 451   1      }
 452          
 453          static          UCHAR
 454          prvucMBBIN2CHAR( UCHAR ucByte )
 455          {
 456   1          if( ucByte <= 0x09 )
 457   1          {
 458   2              return ( UCHAR )( '0' + ucByte );
 459   2          }
 460   1          else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
 461   1          {
 462   2              return ( UCHAR )( ucByte - 0x0A + 'A' );
 463   2          }
 464   1          else
 465   1          {
 466   2              /* Programming error. */
 467   2              assert( 0 );
 468   2          }
 469   1          return '0';
 470   1      }
 471          
 472          
 473          static          UCHAR
 474          prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
 475          {
 476   1          UCHAR           ucLRC = 0;  /* LRC char initialized */
 477   1      
 478   1          while( usLen-- )
 479   1          {
 480   2              ucLRC += *pucFrame++;   /* Add buffer byte without carry */
 481   2          }
 482   1      
 483   1          /* Return twos complement */
 484   1          ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 9   

 485   1          return ucLRC;
 486   1      }
 487          
 488          #endif
*** WARNING C291 IN LINE 451 OF MODBUS\ASCII\MBASCII.C: not every exit path returns a value
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _eMBASCIIInit (BEGIN)
                                           ; SOURCE LINE # 108
0000 900000      R     MOV     DPTR,#ucSlaveAddress
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#ucPort
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
000A 900000      R     MOV     DPTR,#eStatus
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 113
000F C2AF              CLR     EA
                                           ; SOURCE LINE # 114
0011 900000      R     MOV     DPTR,#ucMBLFCharacter
0014 740A              MOV     A,#0AH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
0017 900000      R     MOV     DPTR,#ucPort
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C C007              PUSH    AR7
001E 900000      R     MOV     DPTR,#ulBaudRate
0021 E0                MOVX    A,@DPTR
0022 FC                MOV     R4,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      E     MOV     DPTR,#?_xMBPortSerialInit?BYTE+01H
002F 120000      E     LCALL   ?C?LSTXDATA
0032 900000      E     MOV     DPTR,#?_xMBPortSerialInit?BYTE+05H
0035 7407              MOV     A,#07H
0037 F0                MOVX    @DPTR,A
0038 900000      R     MOV     DPTR,#eParity
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 900000      E     MOV     DPTR,#?_xMBPortSerialInit?BYTE+06H
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
0042 D007              POP     AR7
0044 120000      E     LCALL   _xMBPortSerialInit
0047 EF                MOV     A,R7
0048 6401              XRL     A,#01H
004A 6008              JZ      ?C0001
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
004C 900000      R     MOV     DPTR,#eStatus
004F 7403              MOV     A,#03H
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 11  

0052 8012              SJMP    ?C0002
0054         ?C0001:
                                           ; SOURCE LINE # 120
0054 7F20              MOV     R7,#020H
0056 7E4E              MOV     R6,#04EH
0058 120000      E     LCALL   _xMBPortTimersInit
005B EF                MOV     A,R7
005C 6401              XRL     A,#01H
005E 6006              JZ      ?C0002
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
0060 900000      R     MOV     DPTR,#eStatus
0063 7403              MOV     A,#03H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0066         ?C0003:
0066         ?C0002:
                                           ; SOURCE LINE # 125
0066 D2AF              SETB    EA
                                           ; SOURCE LINE # 126
0068 900000      R     MOV     DPTR,#eSndState
006B E4                CLR     A
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
006D 900000      R     MOV     DPTR,#eStatus
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
                                           ; SOURCE LINE # 129
0072         ?C0004:
0072 22                RET     
             ; FUNCTION _eMBASCIIInit (END)

             ; FUNCTION eMBASCIIStart (BEGIN)
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 135
0002 7D00              MOV     R5,#00H
0004 7F01              MOV     R7,#01H
0006 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 136
0009 900000      R     MOV     DPTR,#eRcvState
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
000E D2AF              SETB    EA
                                           ; SOURCE LINE # 140
0010 7F00              MOV     R7,#00H
0012 120000      E     LCALL   _xMBPortEventPost
                                           ; SOURCE LINE # 141
0015         ?C0005:
0015 22                RET     
             ; FUNCTION eMBASCIIStart (END)

             ; FUNCTION eMBASCIIStop (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 147
0002 7D00              MOV     R5,#00H
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 12  

0004 7F00              MOV     R7,#00H
0006 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 148
0009 120000      E     LCALL   vMBPortTimersDisable
                                           ; SOURCE LINE # 149
000C D2AF              SETB    EA
                                           ; SOURCE LINE # 150
000E         ?C0006:
000E 22                RET     
             ; FUNCTION eMBASCIIStop (END)

             ; FUNCTION _eMBASCIIReceive (BEGIN)
                                           ; SOURCE LINE # 153
0000 900000      R     MOV     DPTR,#pucRcvAddress
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
000B 900000      R     MOV     DPTR,#eStatus
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
0010 C2AF              CLR     EA
                                           ; SOURCE LINE # 162
0012 900000      R     MOV     DPTR,#usRcvBufferPos
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A C3                CLR     C
001B EF                MOV     A,R7
001C 9403              SUBB    A,#03H
001E EE                MOV     A,R6
001F 9400              SUBB    A,#00H
0021 5003              JNC     $ + 5H
0023 020000      R     LJMP    ?C0007
0026 900000      R     MOV     DPTR,#ucASCIIBuf
0029 E0                MOVX    A,@DPTR
002A FB                MOV     R3,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FA                MOV     R2,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 F9                MOV     R1,A
0031 900000      R     MOV     DPTR,#usRcvBufferPos
0034 E0                MOVX    A,@DPTR
0035 FC                MOV     R4,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 FD                MOV     R5,A
0039 120000      R     LCALL   _prvucMBLRC
003C EF                MOV     A,R7
003D 7068              JNZ     ?C0007
                                           ; SOURCE LINE # 163
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 13  

                                           ; SOURCE LINE # 167
003F 900000      R     MOV     DPTR,#ucASCIIBuf
0042 E0                MOVX    A,@DPTR
0043 FB                MOV     R3,A
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FA                MOV     R2,A
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 F9                MOV     R1,A
004A 120000      E     LCALL   ?C?CLDPTR
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#pucRcvAddress
0051 E0                MOVX    A,@DPTR
0052 FB                MOV     R3,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 FA                MOV     R2,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 F9                MOV     R1,A
0059 EF                MOV     A,R7
005A 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 172
005D 900000      R     MOV     DPTR,#usRcvBufferPos
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 24FE              ADD     A,#0FEH
0068 FF                MOV     R7,A
0069 EE                MOV     A,R6
006A 34FF              ADDC    A,#0FFH
006C FE                MOV     R6,A
006D 900000      R     MOV     DPTR,#pusLength
0070 E0                MOVX    A,@DPTR
0071 FB                MOV     R3,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FA                MOV     R2,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 F9                MOV     R1,A
0078 EE                MOV     A,R6
0079 8FF0              MOV     B,R7
007B 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 175
007E 900000      R     MOV     DPTR,#ucASCIIBuf
0081 E0                MOVX    A,@DPTR
0082 FB                MOV     R3,A
0083 A3                INC     DPTR
0084 E0                MOVX    A,@DPTR
0085 FA                MOV     R2,A
0086 A3                INC     DPTR
0087 E0                MOVX    A,@DPTR
0088 F9                MOV     R1,A
0089 E9                MOV     A,R1
008A 2401              ADD     A,#01H
008C F9                MOV     R1,A
008D EA                MOV     A,R2
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 14  

008E 3400              ADDC    A,#00H
0090 FA                MOV     R2,A
0091 C003              PUSH    AR3
0093 C002              PUSH    AR2
0095 C001              PUSH    AR1
0097 900000      R     MOV     DPTR,#pucFrame
009A E0                MOVX    A,@DPTR
009B FB                MOV     R3,A
009C A3                INC     DPTR
009D E0                MOVX    A,@DPTR
009E FA                MOV     R2,A
009F A3                INC     DPTR
00A0 E0                MOVX    A,@DPTR
00A1 F9                MOV     R1,A
00A2 120000      E     LCALL   ?C?PSTPTR
                                           ; SOURCE LINE # 176
00A5 8006              SJMP    ?C0008
00A7         ?C0007:
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
00A7 900000      R     MOV     DPTR,#eStatus
00AA 7405              MOV     A,#05H
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
00AD         ?C0008:
                                           ; SOURCE LINE # 181
00AD D2AF              SETB    EA
                                           ; SOURCE LINE # 182
00AF 900000      R     MOV     DPTR,#eStatus
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
                                           ; SOURCE LINE # 183
00B4         ?C0009:
00B4 22                RET     
             ; FUNCTION _eMBASCIIReceive (END)

             ; FUNCTION _eMBASCIISend (BEGIN)
                                           ; SOURCE LINE # 186
0000 900000      R     MOV     DPTR,#ucSlaveAddress
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#pucFrame
0008 EB                MOV     A,R3
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B EA                MOV     A,R2
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E E9                MOV     A,R1
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0010 900000      R     MOV     DPTR,#eStatus
0013 E4                CLR     A
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0015 C2AF              CLR     EA
                                           ; SOURCE LINE # 196
0017 900000      R     MOV     DPTR,#eRcvState
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 15  

001D 6003              JZ      $ + 5H
001F 020000      R     LJMP    ?C0010
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 199
0022 900000      R     MOV     DPTR,#pucFrame
0025 E0                MOVX    A,@DPTR
0026 FB                MOV     R3,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 FA                MOV     R2,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C F9                MOV     R1,A
002D E9                MOV     A,R1
002E 24FF              ADD     A,#0FFH
0030 F9                MOV     R1,A
0031 EA                MOV     A,R2
0032 34FF              ADDC    A,#0FFH
0034 FA                MOV     R2,A
0035 900000      R     MOV     DPTR,#pucSndBufferCur
0038 EB                MOV     A,R3
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B EA                MOV     A,R2
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E E9                MOV     A,R1
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0040 900000      R     MOV     DPTR,#usSndBufferCount
0043 E4                CLR     A
0044 F0                MOVX    @DPTR,A
0045 A3                INC     DPTR
0046 7401              MOV     A,#01H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
0049 900000      R     MOV     DPTR,#ucSlaveAddress
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#pucSndBufferCur
0051 E0                MOVX    A,@DPTR
0052 FB                MOV     R3,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 FA                MOV     R2,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 F9                MOV     R1,A
0059 EF                MOV     A,R7
005A 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 204
005D 900000      R     MOV     DPTR,#usLength
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 900000      R     MOV     DPTR,#usSndBufferCount+01H
0068 E0                MOVX    A,@DPTR
0069 2F                ADD     A,R7
006A F0                MOVX    @DPTR,A
006B 900000      R     MOV     DPTR,#usSndBufferCount
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 16  

006E E0                MOVX    A,@DPTR
006F 3E                ADDC    A,R6
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0071 900000      R     MOV     DPTR,#pucSndBufferCur
0074 E0                MOVX    A,@DPTR
0075 FB                MOV     R3,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FA                MOV     R2,A
0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B F9                MOV     R1,A
007C 900000      R     MOV     DPTR,#usSndBufferCount
007F E0                MOVX    A,@DPTR
0080 FC                MOV     R4,A
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083 FD                MOV     R5,A
0084 120000      R     LCALL   _prvucMBLRC
0087 900000      R     MOV     DPTR,#usLRC
008A EF                MOV     A,R7
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
008C 900000      R     MOV     DPTR,#usLRC
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 900000      R     MOV     DPTR,#ucASCIIBuf
0094 E0                MOVX    A,@DPTR
0095 FB                MOV     R3,A
0096 A3                INC     DPTR
0097 E0                MOVX    A,@DPTR
0098 FA                MOV     R2,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B F9                MOV     R1,A
009C 900000      R     MOV     DPTR,#usSndBufferCount
009F E4                CLR     A
00A0 75F001            MOV     B,#01H
00A3 120000      E     LCALL   ?C?ILDIX
00A6 ADF0              MOV     R5,B
00A8 FC                MOV     R4,A
00A9 8D82              MOV     DPL,R5
00AB 8C83              MOV     DPH,R4
00AD EF                MOV     A,R7
00AE 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 211
00B1 900000      R     MOV     DPTR,#eSndState
00B4 7401              MOV     A,#01H
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
00B7 7D01              MOV     R5,#01H
00B9 7F00              MOV     R7,#00H
00BB 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 213
00BE 120000      R     LCALL   _?xMBASCIITransmitFSM
                                           ; SOURCE LINE # 214
00C1 8006              SJMP    ?C0011
00C3         ?C0010:
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
00C3 900000      R     MOV     DPTR,#eStatus
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 17  

00C6 7405              MOV     A,#05H
00C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
00C9         ?C0011:
                                           ; SOURCE LINE # 219
00C9 D2AF              SETB    EA
                                           ; SOURCE LINE # 220
00CB 900000      R     MOV     DPTR,#eStatus
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
                                           ; SOURCE LINE # 221
00D0         ?C0012:
00D0 22                RET     
             ; FUNCTION _eMBASCIISend (END)

             ; FUNCTION _?xMBASCIIReceiveFSM (BEGIN)
                                           ; SOURCE LINE # 224
0000 90FFFD            MOV     DPTR,#0FFFDH
0003 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 226
0006 850083      E     MOV     DPH,?C_XBP
0009 850082      E     MOV     DPL,?C_XBP+01H
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
000E 7B01              MOV     R3,#01H
0010 850083      E     MOV     DPH,?C_XBP
0013 850082      E     MOV     DPL,?C_XBP+01H
0016 A3                INC     DPTR
0017 A982              MOV     R1,DPL
0019 AA83              MOV     R2,DPH
001B 120000      E     LCALL   _xMBPortSerialGetByte
                                           ; SOURCE LINE # 233
001E 900000      R     MOV     DPTR,#eRcvState
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 120000      E     LCALL   ?C?CCASE
0027 0000        R     DW      ?C0029
0029 00                DB      00H
002A 0000        R     DW      ?C0014
002C 01                DB      01H
002D 0000        R     DW      ?C0024
002F 02                DB      02H
0030 0000              DW      00H
0032 0000        R     DW      ?C0013
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 240
0034         ?C0014:
                                           ; SOURCE LINE # 242
0034 120000      E     LCALL   vMBPortTimersEnable
                                           ; SOURCE LINE # 243
0037 850083      E     MOV     DPH,?C_XBP
003A 850082      E     MOV     DPL,?C_XBP+01H
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 B43A10            CJNE    A,#03AH,?C0015
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 246
0044 900000      R     MOV     DPTR,#eBytePos
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 18  

0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0049 900000      R     MOV     DPTR,#usRcvBufferPos
004C E4                CLR     A
004D F0                MOVX    @DPTR,A
004E A3                INC     DPTR
004F E4                CLR     A
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
0051 020000      R     LJMP    ?C0013
0054         ?C0015:
                                           ; SOURCE LINE # 249
0054 850083      E     MOV     DPH,?C_XBP
0057 850082      E     MOV     DPL,?C_XBP+01H
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E B40D09            CJNE    A,#0DH,?C0017
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
0061 900000      R     MOV     DPTR,#eRcvState
0064 7402              MOV     A,#02H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0067 020000      R     LJMP    ?C0013
006A         ?C0017:
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
006A 850083      E     MOV     DPH,?C_XBP
006D 850082      E     MOV     DPL,?C_XBP+01H
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 120000      R     LCALL   _prvucMBCHAR2BIN
0076 850083      E     MOV     DPH,?C_XBP
0079 850082      E     MOV     DPL,?C_XBP+01H
007C A3                INC     DPTR
007D A3                INC     DPTR
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0080 900000      R     MOV     DPTR,#eBytePos
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
0086 120000      E     LCALL   ?C?CCASE
0089 0000        R     DW      ?C0020
008B 00                DB      00H
008C 0000        R     DW      ?C0023
008E 01                DB      01H
008F 0000              DW      00H
0091 0000        R     DW      ?C0013
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 260
0093         ?C0020:
                                           ; SOURCE LINE # 261
0093 900000      R     MOV     DPTR,#usRcvBufferPos
0096 E0                MOVX    A,@DPTR
0097 FE                MOV     R6,A
0098 A3                INC     DPTR
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 19  

0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B C3                CLR     C
009C EE                MOV     A,R6
009D 9401              SUBB    A,#01H
009F 5036              JNC     ?C0021
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
00A1 850083      E     MOV     DPH,?C_XBP
00A4 850082      E     MOV     DPL,?C_XBP+01H
00A7 A3                INC     DPTR
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB EF                MOV     A,R7
00AC C4                SWAP    A
00AD 54F0              ANL     A,#0F0H
00AF FF                MOV     R7,A
00B0 900000      R     MOV     DPTR,#ucASCIIBuf
00B3 E0                MOVX    A,@DPTR
00B4 FB                MOV     R3,A
00B5 A3                INC     DPTR
00B6 E0                MOVX    A,@DPTR
00B7 FA                MOV     R2,A
00B8 A3                INC     DPTR
00B9 E0                MOVX    A,@DPTR
00BA F9                MOV     R1,A
00BB 900000      R     MOV     DPTR,#usRcvBufferPos
00BE E0                MOVX    A,@DPTR
00BF FC                MOV     R4,A
00C0 A3                INC     DPTR
00C1 E0                MOVX    A,@DPTR
00C2 FD                MOV     R5,A
00C3 8D82              MOV     DPL,R5
00C5 8C83              MOV     DPH,R4
00C7 EF                MOV     A,R7
00C8 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 264
00CB 900000      R     MOV     DPTR,#eBytePos
00CE 7401              MOV     A,#01H
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
00D1 020000      R     LJMP    ?C0013
                                           ; SOURCE LINE # 266
00D4 020000      R     LJMP    ?C0013
00D7         ?C0021:
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 271
00D7 900000      R     MOV     DPTR,#eRcvState
00DA E4                CLR     A
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
00DC 120000      E     LCALL   vMBPortTimersDisable
                                           ; SOURCE LINE # 274
00DF         ?C0022:
                                           ; SOURCE LINE # 275
00DF 020000      R     LJMP    ?C0013
                                           ; SOURCE LINE # 277
00E2         ?C0023:
                                           ; SOURCE LINE # 278
00E2 900000      R     MOV     DPTR,#ucASCIIBuf
00E5 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 20  

00E6 FB                MOV     R3,A
00E7 A3                INC     DPTR
00E8 E0                MOVX    A,@DPTR
00E9 FA                MOV     R2,A
00EA A3                INC     DPTR
00EB E0                MOVX    A,@DPTR
00EC F9                MOV     R1,A
00ED 900000      R     MOV     DPTR,#usRcvBufferPos
00F0 E0                MOVX    A,@DPTR
00F1 FE                MOV     R6,A
00F2 A3                INC     DPTR
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 E9                MOV     A,R1
00F6 2F                ADD     A,R7
00F7 F9                MOV     R1,A
00F8 EA                MOV     A,R2
00F9 3E                ADDC    A,R6
00FA FA                MOV     R2,A
00FB 120000      E     LCALL   ?C?CLDPTR
00FE FF                MOV     R7,A
00FF 850083      E     MOV     DPH,?C_XBP
0102 850082      E     MOV     DPL,?C_XBP+01H
0105 A3                INC     DPTR
0106 A3                INC     DPTR
0107 E0                MOVX    A,@DPTR
0108 FE                MOV     R6,A
0109 EF                MOV     A,R7
010A 4E                ORL     A,R6
010B FF                MOV     R7,A
010C EF                MOV     A,R7
010D 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 279
0110 900000      R     MOV     DPTR,#usRcvBufferPos+01H
0113 E0                MOVX    A,@DPTR
0114 04                INC     A
0115 F0                MOVX    @DPTR,A
0116 7006              JNZ     ?C0062
0118 900000      R     MOV     DPTR,#usRcvBufferPos
011B E0                MOVX    A,@DPTR
011C 04                INC     A
011D F0                MOVX    @DPTR,A
011E         ?C0062:
                                           ; SOURCE LINE # 280
011E 900000      R     MOV     DPTR,#eBytePos
0121 E4                CLR     A
0122 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
0123 807A              SJMP    ?C0013
                                           ; SOURCE LINE # 282
0125         ?C0019:
                                           ; SOURCE LINE # 283
0125         ?C0018:
0125         ?C0016:
                                           ; SOURCE LINE # 284
0125 8078              SJMP    ?C0013
                                           ; SOURCE LINE # 286
0127         ?C0024:
                                           ; SOURCE LINE # 287
0127 900000      R     MOV     DPTR,#ucMBLFCharacter
012A E0                MOVX    A,@DPTR
012B FF                MOV     R7,A
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 21  

012C 850083      E     MOV     DPH,?C_XBP
012F 850082      E     MOV     DPL,?C_XBP+01H
0132 A3                INC     DPTR
0133 E0                MOVX    A,@DPTR
0134 FE                MOV     R6,A
0135 EE                MOV     A,R6
0136 B50717            CJNE    A,AR7,?C0025
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 291
0139 120000      E     LCALL   vMBPortTimersDisable
                                           ; SOURCE LINE # 293
013C 900000      R     MOV     DPTR,#eRcvState
013F E4                CLR     A
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
0141 7F01              MOV     R7,#01H
0143 120000      E     LCALL   _xMBPortEventPost
0146 850083      E     MOV     DPH,?C_XBP
0149 850082      E     MOV     DPL,?C_XBP+01H
014C EF                MOV     A,R7
014D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 298
014E 804F              SJMP    ?C0013
0150         ?C0025:
                                           ; SOURCE LINE # 299
0150 850083      E     MOV     DPH,?C_XBP
0153 850082      E     MOV     DPL,?C_XBP+01H
0156 A3                INC     DPTR
0157 E0                MOVX    A,@DPTR
0158 FF                MOV     R7,A
0159 EF                MOV     A,R7
015A B43A18            CJNE    A,#03AH,?C0027
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 302
015D 900000      R     MOV     DPTR,#eBytePos
0160 E4                CLR     A
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
0162 900000      R     MOV     DPTR,#usRcvBufferPos
0165 E4                CLR     A
0166 F0                MOVX    @DPTR,A
0167 A3                INC     DPTR
0168 E4                CLR     A
0169 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
016A 900000      R     MOV     DPTR,#eRcvState
016D 7401              MOV     A,#01H
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
0170 120000      E     LCALL   vMBPortTimersEnable
                                           ; SOURCE LINE # 308
0173 802A              SJMP    ?C0013
0175         ?C0027:
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 312
0175 900000      R     MOV     DPTR,#eRcvState
0178 E4                CLR     A
0179 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
017A         ?C0028:
017A         ?C0026:
                                           ; SOURCE LINE # 314
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 22  

017A 8023              SJMP    ?C0013
                                           ; SOURCE LINE # 316
017C         ?C0029:
                                           ; SOURCE LINE # 317
017C 850083      E     MOV     DPH,?C_XBP
017F 850082      E     MOV     DPL,?C_XBP+01H
0182 A3                INC     DPTR
0183 E0                MOVX    A,@DPTR
0184 FF                MOV     R7,A
0185 EF                MOV     A,R7
0186 B43A16            CJNE    A,#03AH,?C0013
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 320
0189 120000      E     LCALL   vMBPortTimersEnable
                                           ; SOURCE LINE # 322
018C 900000      R     MOV     DPTR,#usRcvBufferPos
018F E4                CLR     A
0190 F0                MOVX    @DPTR,A
0191 A3                INC     DPTR
0192 E4                CLR     A
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
0194 900000      R     MOV     DPTR,#eBytePos
0197 E4                CLR     A
0198 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0199 900000      R     MOV     DPTR,#eRcvState
019C 7401              MOV     A,#01H
019E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
019F         ?C0030:
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
019F         ?C0013:
                                           ; SOURCE LINE # 329
019F 850083      E     MOV     DPH,?C_XBP
01A2 850082      E     MOV     DPL,?C_XBP+01H
01A5 E0                MOVX    A,@DPTR
01A6 FF                MOV     R7,A
                                           ; SOURCE LINE # 330
01A7         ?C0031:
01A7 900003            MOV     DPTR,#03H
01AA 120000      E     LCALL   ?C?ADDXBP
01AD 22                RET     
             ; FUNCTION _?xMBASCIIReceiveFSM (END)

             ; FUNCTION _?xMBASCIITransmitFSM (BEGIN)
                                           ; SOURCE LINE # 333
0000 90FFFE            MOV     DPTR,#0FFFEH
0003 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 335
0006 850083      E     MOV     DPH,?C_XBP
0009 850082      E     MOV     DPL,?C_XBP+01H
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 339
000E 900000      R     MOV     DPTR,#eSndState
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 120000      E     LCALL   ?C?CCASE
0017 0000        R     DW      ?C0042
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 23  

0019 00                DB      00H
001A 0000        R     DW      ?C0033
001C 01                DB      01H
001D 0000        R     DW      ?C0034
001F 02                DB      02H
0020 0000        R     DW      ?C0040
0022 03                DB      03H
0023 0000        R     DW      ?C0041
0025 04                DB      04H
0026 0000              DW      00H
0028 0000        R     DW      ?C0032
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 343
002A         ?C0033:
                                           ; SOURCE LINE # 344
002A 850083      E     MOV     DPH,?C_XBP
002D 850082      E     MOV     DPL,?C_XBP+01H
0030 A3                INC     DPTR
0031 743A              MOV     A,#03AH
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
0034 850083      E     MOV     DPH,?C_XBP
0037 850082      E     MOV     DPL,?C_XBP+01H
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 120000      E     LCALL   _xMBPortSerialPutByte
                                           ; SOURCE LINE # 346
0040 900000      R     MOV     DPTR,#eSndState
0043 7402              MOV     A,#02H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
0046 900000      R     MOV     DPTR,#eBytePos
0049 E4                CLR     A
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
004B 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 354
004E         ?C0034:
                                           ; SOURCE LINE # 355
004E 900000      R     MOV     DPTR,#usSndBufferCount
0051 E0                MOVX    A,@DPTR
0052 FE                MOV     R6,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 D3                SETB    C
0057 EF                MOV     A,R7
0058 9400              SUBB    A,#00H
005A EE                MOV     A,R6
005B 9400              SUBB    A,#00H
005D 5003              JNC     $ + 5H
005F 020000      R     LJMP    ?C0035
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
0062 900000      R     MOV     DPTR,#eBytePos
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 120000      E     LCALL   ?C?CCASE
006B 0000        R     DW      ?C0037
006D 00                DB      00H
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 24  

006E 0000        R     DW      ?C0038
0070 01                DB      01H
0071 0000              DW      00H
0073 0000        R     DW      ?C0032
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
0075         ?C0037:
                                           ; SOURCE LINE # 360
0075 900000      R     MOV     DPTR,#pucSndBufferCur
0078 E0                MOVX    A,@DPTR
0079 FB                MOV     R3,A
007A A3                INC     DPTR
007B E0                MOVX    A,@DPTR
007C FA                MOV     R2,A
007D A3                INC     DPTR
007E E0                MOVX    A,@DPTR
007F F9                MOV     R1,A
0080 120000      E     LCALL   ?C?CLDPTR
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 C4                SWAP    A
0086 540F              ANL     A,#0FH
0088 FF                MOV     R7,A
0089 120000      R     LCALL   _prvucMBBIN2CHAR
008C 850083      E     MOV     DPH,?C_XBP
008F 850082      E     MOV     DPL,?C_XBP+01H
0092 A3                INC     DPTR
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
0095 850083      E     MOV     DPH,?C_XBP
0098 850082      E     MOV     DPL,?C_XBP+01H
009B A3                INC     DPTR
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
009E 120000      E     LCALL   _xMBPortSerialPutByte
                                           ; SOURCE LINE # 362
00A1 900000      R     MOV     DPTR,#eBytePos
00A4 7401              MOV     A,#01H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
00A7 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 365
00AA         ?C0038:
                                           ; SOURCE LINE # 366
00AA 900000      R     MOV     DPTR,#pucSndBufferCur
00AD E0                MOVX    A,@DPTR
00AE FB                MOV     R3,A
00AF A3                INC     DPTR
00B0 E0                MOVX    A,@DPTR
00B1 FA                MOV     R2,A
00B2 A3                INC     DPTR
00B3 E0                MOVX    A,@DPTR
00B4 F9                MOV     R1,A
00B5 120000      E     LCALL   ?C?CLDPTR
00B8 FF                MOV     R7,A
00B9 EF                MOV     A,R7
00BA 540F              ANL     A,#0FH
00BC FF                MOV     R7,A
00BD 120000      R     LCALL   _prvucMBBIN2CHAR
00C0 850083      E     MOV     DPH,?C_XBP
00C3 850082      E     MOV     DPL,?C_XBP+01H
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 25  

00C6 A3                INC     DPTR
00C7 EF                MOV     A,R7
00C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
00C9 850083      E     MOV     DPH,?C_XBP
00CC 850082      E     MOV     DPL,?C_XBP+01H
00CF A3                INC     DPTR
00D0 E0                MOVX    A,@DPTR
00D1 FF                MOV     R7,A
00D2 120000      E     LCALL   _xMBPortSerialPutByte
                                           ; SOURCE LINE # 368
00D5 900000      R     MOV     DPTR,#pucSndBufferCur+01H
00D8 E4                CLR     A
00D9 75F001            MOV     B,#01H
00DC 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 369
00DF 900000      R     MOV     DPTR,#eBytePos
00E2 E4                CLR     A
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
00E4 900000      R     MOV     DPTR,#usSndBufferCount+01H
00E7 E0                MOVX    A,@DPTR
00E8 24FF              ADD     A,#0FFH
00EA F0                MOVX    @DPTR,A
00EB 900000      R     MOV     DPTR,#usSndBufferCount
00EE E0                MOVX    A,@DPTR
00EF 34FF              ADDC    A,#0FFH
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
00F2 8046              SJMP    ?C0032
                                           ; SOURCE LINE # 372
00F4         ?C0036:
                                           ; SOURCE LINE # 373
00F4 8044              SJMP    ?C0032
00F6         ?C0035:
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
00F6 7F0D              MOV     R7,#0DH
00F8 120000      E     LCALL   _xMBPortSerialPutByte
                                           ; SOURCE LINE # 377
00FB 900000      R     MOV     DPTR,#eSndState
00FE 7403              MOV     A,#03H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
0101         ?C0039:
                                           ; SOURCE LINE # 379
0101 8037              SJMP    ?C0032
                                           ; SOURCE LINE # 382
0103         ?C0040:
                                           ; SOURCE LINE # 383
0103 900000      R     MOV     DPTR,#ucMBLFCharacter
0106 E0                MOVX    A,@DPTR
0107 FF                MOV     R7,A
0108 120000      E     LCALL   _xMBPortSerialPutByte
                                           ; SOURCE LINE # 386
010B 900000      R     MOV     DPTR,#eSndState
010E 7404              MOV     A,#04H
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
0111 8027              SJMP    ?C0032
                                           ; SOURCE LINE # 391
0113         ?C0041:
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 26  

                                           ; SOURCE LINE # 392
0113 900000      R     MOV     DPTR,#eSndState
0116 E4                CLR     A
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
0118 7F03              MOV     R7,#03H
011A 120000      E     LCALL   _xMBPortEventPost
011D 850083      E     MOV     DPH,?C_XBP
0120 850082      E     MOV     DPL,?C_XBP+01H
0123 EF                MOV     A,R7
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
0125 7D00              MOV     R5,#00H
0127 7F01              MOV     R7,#01H
0129 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 398
012C 900000      R     MOV     DPTR,#eSndState
012F E4                CLR     A
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
0131 8007              SJMP    ?C0032
                                           ; SOURCE LINE # 403
0133         ?C0042:
                                           ; SOURCE LINE # 405
0133 7D00              MOV     R5,#00H
0135 7F01              MOV     R7,#01H
0137 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
013A         ?C0032:
                                           ; SOURCE LINE # 409
013A 850083      E     MOV     DPH,?C_XBP
013D 850082      E     MOV     DPL,?C_XBP+01H
0140 E0                MOVX    A,@DPTR
0141 FF                MOV     R7,A
                                           ; SOURCE LINE # 410
0142         ?C0043:
0142 900002            MOV     DPTR,#02H
0145 120000      E     LCALL   ?C?ADDXBP
0148 22                RET     
             ; FUNCTION _?xMBASCIITransmitFSM (END)

             ; FUNCTION _?xMBASCIITimerT1SExpired (BEGIN)
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 415
0000 900000      R     MOV     DPTR,#eRcvState
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 120000      E     LCALL   ?C?CCASE
0009 0000        R     DW      ?C0046
000B 01                DB      01H
000C 0000        R     DW      ?C0046
000E 02                DB      02H
000F 0000              DW      00H
0011 0000        R     DW      ?C0044
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 420
0013         ?C0045:
                                           ; SOURCE LINE # 421
0013         ?C0046:
                                           ; SOURCE LINE # 422
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 27  

0013 900000      R     MOV     DPTR,#eRcvState
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 425
0018         ?C0047:
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
0018         ?C0044:
                                           ; SOURCE LINE # 429
0018 120000      E     LCALL   vMBPortTimersDisable
                                           ; SOURCE LINE # 432
001B 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 433
001D         ?C0048:
001D 22                RET     
             ; FUNCTION _?xMBASCIITimerT1SExpired (END)

             ; FUNCTION _prvucMBCHAR2BIN (BEGIN)
                                           ; SOURCE LINE # 437
0000 900000      R     MOV     DPTR,#ucCharacter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
0005 900000      R     MOV     DPTR,#ucCharacter
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9430              SUBB    A,#030H
000E 4017              JC      ?C0049
0010 900000      R     MOV     DPTR,#ucCharacter
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 D3                SETB    C
0017 9439              SUBB    A,#039H
0019 500C              JNC     ?C0049
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
001B 900000      R     MOV     DPTR,#ucCharacter
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 C3                CLR     C
0021 EF                MOV     A,R7
0022 9430              SUBB    A,#030H
0024 FF                MOV     R7,A
0025 22                RET     
                                           ; SOURCE LINE # 442
0026 22                RET     
0027         ?C0049:
                                           ; SOURCE LINE # 443
0027 900000      R     MOV     DPTR,#ucCharacter
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D C3                CLR     C
002E 9441              SUBB    A,#041H
0030 4016              JC      ?C0052
0032 900000      R     MOV     DPTR,#ucCharacter
0035 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 28  

0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 D3                SETB    C
0039 9446              SUBB    A,#046H
003B 500B              JNC     ?C0052
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
003D 900000      R     MOV     DPTR,#ucCharacter
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 24C9              ADD     A,#0C9H
0045 FF                MOV     R7,A
0046 22                RET     
                                           ; SOURCE LINE # 446
0047 22                RET     
0048         ?C0052:
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
0048 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 450
004A         ?C0053:
004A         ?C0051:
                                           ; SOURCE LINE # 451
004A         ?C0050:
004A 22                RET     
             ; FUNCTION _prvucMBCHAR2BIN (END)

             ; FUNCTION _prvucMBBIN2CHAR (BEGIN)
                                           ; SOURCE LINE # 454
0000 900000      R     MOV     DPTR,#ucByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
0005 900000      R     MOV     DPTR,#ucByte
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 9409              SUBB    A,#09H
000E 500C              JNC     ?C0054
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
0010 900000      R     MOV     DPTR,#ucByte
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 2430              ADD     A,#030H
0018 FF                MOV     R7,A
0019 22                RET     
                                           ; SOURCE LINE # 459
001A 8020              SJMP    ?C0056
001C         ?C0054:
                                           ; SOURCE LINE # 460
001C 900000      R     MOV     DPTR,#ucByte
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C3                CLR     C
0023 940A              SUBB    A,#0AH
0025 4015              JC      ?C0056
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 29  

0027 900000      R     MOV     DPTR,#ucByte
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D D3                SETB    C
002E 940F              SUBB    A,#0FH
0030 500A              JNC     ?C0056
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
0032 900000      R     MOV     DPTR,#ucByte
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 2437              ADD     A,#037H
003A FF                MOV     R7,A
003B 22                RET     
                                           ; SOURCE LINE # 463
003C         ?C0057:
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 468
003C         ?C0058:
003C         ?C0056:
                                           ; SOURCE LINE # 469
003C 7F30              MOV     R7,#030H
                                           ; SOURCE LINE # 470
003E         ?C0055:
003E 22                RET     
             ; FUNCTION _prvucMBBIN2CHAR (END)

             ; FUNCTION _prvucMBLRC (BEGIN)
                                           ; SOURCE LINE # 474
0000 900000      R     MOV     DPTR,#pucFrame
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
000B 900000      R     MOV     DPTR,#usLen
000E EC                MOV     A,R4
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 ED                MOV     A,R5
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
0013 900000      R     MOV     DPTR,#ucLRC
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
0018         ?C0059:
                                           ; SOURCE LINE # 478
0018 900000      R     MOV     DPTR,#usLen
001B 74FF              MOV     A,#0FFH
001D 75F0FF            MOV     B,#0FFH
0020 120000      E     LCALL   ?C?ILDIX
0023 AFF0              MOV     R7,B
0025 FE                MOV     R6,A
0026 EF                MOV     A,R7
0027 4E                ORL     A,R6
0028 601C              JZ      ?C0060
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 30  

                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
002A 900000      R     MOV     DPTR,#pucFrame
002D E0                MOVX    A,@DPTR
002E FB                MOV     R3,A
002F A3                INC     DPTR
0030 E4                CLR     A
0031 75F001            MOV     B,#01H
0034 120000      E     LCALL   ?C?ILDIX
0037 A9F0              MOV     R1,B
0039 FA                MOV     R2,A
003A 120000      E     LCALL   ?C?CLDPTR
003D FF                MOV     R7,A
003E 900000      R     MOV     DPTR,#ucLRC
0041 E0                MOVX    A,@DPTR
0042 2F                ADD     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0044 80D2              SJMP    ?C0059
0046         ?C0060:
                                           ; SOURCE LINE # 484
0046 900000      R     MOV     DPTR,#ucLRC
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C F4                CPL     A
004D 04                INC     A
004E FF                MOV     R7,A
004F 900000      R     MOV     DPTR,#ucLRC
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
0054 900000      R     MOV     DPTR,#ucLRC
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
                                           ; SOURCE LINE # 486
0059         ?C0061:
0059 22                RET     
             ; FUNCTION _prvucMBLRC (END)

C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 31  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


STATE_TX_START . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBErrorCode . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
EV_FRAME_SENT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ULONG. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
ADCSTAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
pxMBFunctionHandler. . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
eMBASCIIStop . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
STATE_TX_DATA. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_PAR_ODD . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_RX_IDLE. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
pvMBFrameStop. . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
ucMBLFCharacter. . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
STATE_TX_IDLE. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_SLAVE_BUSY . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eSndState. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
EV_EXECUTE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SHORT. . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
EV_FRAME_RECEIVED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eRcvState. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0002H  1
MB_EX_ACKNOWLEDGE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
BYTE_LOW_NIBBLE. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
xMBFunctionHandler . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  ucFunctionCode . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  pxHandler. . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
MB_EX_GATEWAY_PATH_FAILED. . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EILLSTATE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
peMBFrameReceive . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
MB_EX_NONE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CHAR . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
eMBEventType . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
I2CCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
eMBSndState. . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_?xMBASCIIReceiveFSM . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  xNeedPoll. . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
  ucByte . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ucResult . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
MB_ETIMEDOUT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
_prvucMBLRC. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  pucFrame . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  usLen. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  ucLRC. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
eMBRcvState. . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
usRcvBufferPos . . . . . . . . . . . .  STATIC   XDATA  U_INT    0003H  2
_?xMBASCIITimerT1SExpired. . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_eMBASCIIReceive . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  pucRcvAddress. . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  pucFrame . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  3
  pusLength. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  3
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
eMBException . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 32  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_xMBPortSerialInit . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BOOL . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
eBytePos . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0005H  1
MB_EINVAL. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LONG . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
MB_ENOREG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_?xMBASCIITransmitFSM. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  xNeedPoll. . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
  ucByte . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
MB_EX_ILLEGAL_FUNCTION . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
ucLRC. . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0006H  1
MB_REG_WRITE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ENOERR. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ENORES. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBBytePos . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_xMBPortTimersInit . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
BYTE_HIGH_NIBBLE . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_ILLEGAL_DATA_VALUE . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_TX_END . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBRegisterMode. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
STATE_TX_NOTIFY. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_REG_READ. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EIO . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_xMBPortSerialGetByte. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPICON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
MB_EX_ILLEGAL_DATA_ADDRESS . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_TCP . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_RX_RCV . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ASCII . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_GATEWAY_TGT_FAILED . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_vMBPortSerialEnable . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
pvMBFrameClose . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
_xMBPortEventPost. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
STATE_RX_WAIT_EOF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
vMBPortTimersDisable . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
peMBFrameSend. . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
ucASCIIBuf . . . . . . . . . . . . . .  STATIC   XDATA  PTR      0007H  3
MB_PAR_EVEN. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_PAR_NONE. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EPORTERR. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_xMBPortSerialPutByte. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
USHORT . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
MB_EX_SLAVE_DEVICE_FAILURE . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_RTU . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_eMBASCIISend. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucSlaveAddress . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  pucFrame . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  3
  usLength . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  usLRC. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
_prvucMBBIN2CHAR . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  ucByte . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_prvucMBCHAR2BIN . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
C51 COMPILER V9.00   MBASCII                                                               06/19/2014 16:55:31 PAGE 33  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  ucCharacter. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
eMBASCIIStart. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
MB_EX_MEMORY_PARITY_ERROR. . . . . . .  E_CONST  -----  U_CHAR   -----  1
vMBPortTimersEnable. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
eMBParity. . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
EV_READY . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ucRTUBuf . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
UCHAR. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
pvMBFrameStart . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
_eMBASCIIInit. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucSlaveAddress . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ucPort . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ulBaudRate . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0002H  4
  eParity. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
usSndBufferCount . . . . . . . . . . .  STATIC   XDATA  U_INT    000AH  2
pucSndBufferCur. . . . . . . . . . . .  STATIC   XDATA  PTR      000CH  3
eMBMode. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1559    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     49    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
