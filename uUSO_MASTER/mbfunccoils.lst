C51 COMPILER V9.00   MBFUNCCOILS                                                           06/19/2014 16:55:31 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MBFUNCCOILS
OBJECT MODULE PLACED IN mbfunccoils.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE modbus\functions\mbfunccoils.c LARGE OPTIMIZE(0,SPEED) BROWSE
                    - MODAB2 INCDIR(.\modbus\include;.\modbus;.\port;.\modbus\ascii;.\modbus\rtu;..\uUSO_MASTER) DEBUG OBJECTEXTEND CODE SYMB
                    -OLS PRINT(.\mbfunccoils.lst) OBJECT(mbfunccoils.obj)

line level    source

   1          /* 
   2           * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3           * Copyright (c) 2006 Christian Walter <wolti@sil.at>
   4           * All rights reserved.
   5           *
   6           * Redistribution and use in source and binary forms, with or without
   7           * modification, are permitted provided that the following conditions
   8           * are met:
   9           * 1. Redistributions of source code must retain the above copyright
  10           *    notice, this list of conditions and the following disclaimer.
  11           * 2. Redistributions in binary form must reproduce the above copyright
  12           *    notice, this list of conditions and the following disclaimer in the
  13           *    documentation and/or other materials provided with the distribution.
  14           * 3. The name of the author may not be used to endorse or promote products
  15           *    derived from this software without specific prior written permission.
  16           *
  17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20           * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23           * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24           * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26           * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27           *
  28           * File: $Id: mbfunccoils.c,v 1.8 2007/02/18 23:47:16 wolti Exp $
  29           */
  30          
  31          /* ----------------------- System includes ----------------------------------*/
  32          #include "stdlib.h"
  33          #include "string.h"
  34          
  35          /* ----------------------- Platform includes --------------------------------*/
  36          #include "port.h"
  37          
  38          /* ----------------------- Modbus includes ----------------------------------*/
  39          #include "mb.h"
*** WARNING C258 IN LINE 41 OF .\MODBUS\RTU\MBRTU.H: 'pucFrame': mspace on parameter ignored
*** WARNING C258 IN LINE 41 OF .\MODBUS\RTU\MBRTU.H: 'pusLength': mspace on parameter ignored
  40          #include "mbframe.h"
  41          #include "mbproto.h"
  42          #include "mbconfig.h"
  43          
  44          /* ----------------------- Defines ------------------------------------------*/
  45          #define MB_PDU_FUNC_READ_ADDR_OFF           ( MB_PDU_DATA_OFF )
  46          #define MB_PDU_FUNC_READ_COILCNT_OFF        ( MB_PDU_DATA_OFF + 2 )
  47          #define MB_PDU_FUNC_READ_SIZE               ( 4 )
  48          #define MB_PDU_FUNC_READ_COILCNT_MAX        ( 0x07D0 )
  49          
  50          #define MB_PDU_FUNC_WRITE_ADDR_OFF          ( MB_PDU_DATA_OFF )
  51          #define MB_PDU_FUNC_WRITE_VALUE_OFF         ( MB_PDU_DATA_OFF + 2 )
C51 COMPILER V9.00   MBFUNCCOILS                                                           06/19/2014 16:55:31 PAGE 2   

  52          #define MB_PDU_FUNC_WRITE_SIZE              ( 4 )
  53          
  54          #define MB_PDU_FUNC_WRITE_MUL_ADDR_OFF      ( MB_PDU_DATA_OFF )
  55          #define MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF   ( MB_PDU_DATA_OFF + 2 )
  56          #define MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF   ( MB_PDU_DATA_OFF + 4 )
  57          #define MB_PDU_FUNC_WRITE_MUL_VALUES_OFF    ( MB_PDU_DATA_OFF + 5 )
  58          #define MB_PDU_FUNC_WRITE_MUL_SIZE_MIN      ( 5 )
  59          #define MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX   ( 0x07B0 )
  60          
  61          /* ----------------------- Static functions ---------------------------------*/
  62          eMBException    prveMBError2Exception( eMBErrorCode eErrorCode );
  63          
  64          /* ----------------------- Start implementation -----------------------------*/
  65          
  66          #if MB_FUNC_READ_COILS_ENABLED > 0
              
              eMBException
              eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
              {
                  USHORT          usRegAddress;
                  USHORT          usCoilCount;
                  UCHAR           ucNBytes;
                  UCHAR          *pucFrameCur;
              
                  eMBException    eStatus = MB_EX_NONE;
                  eMBErrorCode    eRegStatus;
              
                  if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
                  {
                      usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
                      usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
                      usRegAddress++;
              
                      usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
                      usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
              
                      /* Check if the number of registers to read is valid. If not
                       * return Modbus illegal data value exception. 
                       */
                      if( ( usCoilCount >= 1 ) &&
                          ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
                      {
                          /* Set the current PDU data pointer to the beginning. */
                          pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                          *usLen = MB_PDU_FUNC_OFF;
              
                          /* First byte contains the function code. */
                          *pucFrameCur++ = MB_FUNC_READ_COILS;
                          *usLen += 1;
              
                          /* Test if the quantity of coils is a multiple of 8. If not last
                           * byte is only partially field with unused coils set to zero. */
                          if( ( usCoilCount & 0x0007 ) != 0 )
                          {
                              ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
                          }
                          else
                          {
                              ucNBytes = ( UCHAR )( usCoilCount / 8 );
                          }
                          *pucFrameCur++ = ucNBytes;
                          *usLen += 1;
C51 COMPILER V9.00   MBFUNCCOILS                                                           06/19/2014 16:55:31 PAGE 3   

              
                          eRegStatus =
                              eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                                             MB_REG_READ );
              
                          /* If an error occured convert it into a Modbus exception. */
                          if( eRegStatus != MB_ENOERR )
                          {
                              eStatus = prveMBError2Exception( eRegStatus );
                          }
                          else
                          {
                              /* The response contains the function code, the starting address
                               * and the quantity of registers. We reuse the old values in the 
                               * buffer because they are still valid. */
                              *usLen += ucNBytes;;
                          }
                      }
                      else
                      {
                          eStatus = MB_EX_ILLEGAL_DATA_VALUE;
                      }
                  }
                  else
                  {
                      /* Can't be a valid read coil register request because the length
                       * is incorrect. */
                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
                  }
                  return eStatus;
              }
              
              #if MB_FUNC_WRITE_COIL_ENABLED > 0
              eMBException
              eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
              {
                  USHORT          usRegAddress;
                  UCHAR           ucBuf[2];
              
                  eMBException    eStatus = MB_EX_NONE;
                  eMBErrorCode    eRegStatus;
              
                  if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
                  {
                      usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
                      usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
                      usRegAddress++;
              
                      if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
                          ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
                            ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
                      {
                          ucBuf[1] = 0;
                          if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
                          {
                              ucBuf[0] = 1;
                          }
                          else
                          {
                              ucBuf[0] = 0;
                          }
                          eRegStatus =
C51 COMPILER V9.00   MBFUNCCOILS                                                           06/19/2014 16:55:31 PAGE 4   

                              eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
              
                          /* If an error occured convert it into a Modbus exception. */
                          if( eRegStatus != MB_ENOERR )
                          {
                              eStatus = prveMBError2Exception( eRegStatus );
                          }
                      }
                      else
                      {
                          eStatus = MB_EX_ILLEGAL_DATA_VALUE;
                      }
                  }
                  else
                  {
                      /* Can't be a valid write coil register request because the length
                       * is incorrect. */
                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
                  }
                  return eStatus;
              }
              
              #endif
              
              #if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
              eMBException
              eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
              {
                  USHORT          usRegAddress;
                  USHORT          usCoilCnt;
                  UCHAR           ucByteCount;
                  UCHAR           ucByteCountVerify;
              
                  eMBException    eStatus = MB_EX_NONE;
                  eMBErrorCode    eRegStatus;
              
                  if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
                  {
                      usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
                      usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
                      usRegAddress++;
              
                      usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
                      usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
              
                      ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
              
                      /* Compute the number of expected bytes in the request. */
                      if( ( usCoilCnt & 0x0007 ) != 0 )
                      {
                          ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
                      }
                      else
                      {
                          ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
                      }
              
                      if( ( usCoilCnt >= 1 ) &&
                          ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
                          ( ucByteCountVerify == ucByteCount ) )
                      {
                          eRegStatus =
C51 COMPILER V9.00   MBFUNCCOILS                                                           06/19/2014 16:55:31 PAGE 5   

                              eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                             usRegAddress, usCoilCnt, MB_REG_WRITE );
              
                          /* If an error occured convert it into a Modbus exception. */
                          if( eRegStatus != MB_ENOERR )
                          {
                              eStatus = prveMBError2Exception( eRegStatus );
                          }
                          else
                          {
                              /* The response contains the function code, the starting address
                               * and the quantity of registers. We reuse the old values in the 
                               * buffer because they are still valid. */
                              *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
                          }
                      }
                      else
                      {
                          eStatus = MB_EX_ILLEGAL_DATA_VALUE;
                      }
                  }
                  else
                  {
                      /* Can't be a valid write coil register request because the length
                       * is incorrect. */
                      eStatus = MB_EX_ILLEGAL_DATA_VALUE;
                  }
                  return eStatus;
              }
              
              #endif
              
              #endif
C51 COMPILER V9.00   MBFUNCCOILS                                                           06/19/2014 16:55:31 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


C51 COMPILER V9.00   MBFUNCCOILS                                                           06/19/2014 16:55:31 PAGE 7   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


eMBErrorCode . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
EV_FRAME_SENT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ULONG. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
ADCSTAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
pxMBFunctionHandler. . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
MB_PAR_ODD . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
pvMBFrameStop. . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
MB_EX_SLAVE_BUSY . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EV_EXECUTE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SHORT. . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
EV_FRAME_RECEIVED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_ACKNOWLEDGE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
xMBFunctionHandler . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  ucFunctionCode . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  pxHandler. . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
MB_EX_GATEWAY_PATH_FAILED. . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EILLSTATE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
peMBFrameReceive . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
MB_EX_NONE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CHAR . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
eMBEventType . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
I2CCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
MB_ETIMEDOUT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
eMBException . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
BOOL . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
MB_EINVAL. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LONG . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
MB_ENOREG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
MB_EX_ILLEGAL_FUNCTION . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
MB_REG_WRITE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ENOERR. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ENORES. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_ILLEGAL_DATA_VALUE . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBRegisterMode. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
MB_REG_READ. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EIO . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SPICON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
MB_EX_ILLEGAL_DATA_ADDRESS . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_TCP . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ASCII . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_GATEWAY_TGT_FAILED . . . . . . .  E_CONST  -----  U_CHAR   -----  1
pvMBFrameClose . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
peMBFrameSend. . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
MB_PAR_EVEN. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_PAR_NONE. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EPORTERR. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
USHORT . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
MB_EX_SLAVE_DEVICE_FAILURE . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   MBFUNCCOILS                                                           06/19/2014 16:55:31 PAGE 8   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


MB_RTU . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
MB_EX_MEMORY_PARITY_ERROR. . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBParity. . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
EV_READY . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UCHAR. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
pvMBFrameStart . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
eMBMode. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
