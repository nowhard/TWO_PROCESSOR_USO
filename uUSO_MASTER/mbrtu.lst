C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MBRTU
OBJECT MODULE PLACED IN mbrtu.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE modbus\rtu\mbrtu.c LARGE OPTIMIZE(0,SPEED) BROWSE MODAB2 INCD
                    -IR(.\modbus\include;.\modbus;.\port;.\modbus\ascii;.\modbus\rtu;..\uUSO_MASTER) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\
                    -mbrtu.lst) OBJECT(mbrtu.obj)

line level    source

   1          /* 
   2           * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3           * Copyright (c) 2006 Christian Walter <wolti@sil.at>
   4           * All rights reserved.
   5           *
   6           * Redistribution and use in source and binary forms, with or without
   7           * modification, are permitted provided that the following conditions
   8           * are met:
   9           * 1. Redistributions of source code must retain the above copyright
  10           *    notice, this list of conditions and the following disclaimer.
  11           * 2. Redistributions in binary form must reproduce the above copyright
  12           *    notice, this list of conditions and the following disclaimer in the
  13           *    documentation and/or other materials provided with the distribution.
  14           * 3. The name of the author may not be used to endorse or promote products
  15           *    derived from this software without specific prior written permission.
  16           *
  17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20           * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23           * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24           * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26           * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27           *
  28           * File: $Id: mbrtu.c,v 1.18 2007/09/12 10:15:56 wolti Exp $
  29           */
  30          
  31          /* ----------------------- System includes ----------------------------------*/
  32          #include "stdlib.h"
  33          #include "string.h"
  34          
  35          /* ----------------------- Platform includes --------------------------------*/
  36          #include "port.h"
  37          
  38          /* ----------------------- Modbus includes ----------------------------------*/
  39          #include "mb.h"
*** WARNING C258 IN LINE 41 OF MODBUS\RTU\MBRTU.H: 'pucFrame': mspace on parameter ignored
*** WARNING C258 IN LINE 41 OF MODBUS\RTU\MBRTU.H: 'pusLength': mspace on parameter ignored
  40          #include "mbrtu.h"
  41          #include "mbframe.h"
  42          
  43          #include "mbcrc.h"
  44          #include "mbport.h"
  45          
  46          /* ----------------------- Defines ------------------------------------------*/
  47          #define MB_SER_PDU_SIZE_MIN     4       /*!< Minimum size of a Modbus RTU frame. */
  48          #define MB_SER_PDU_SIZE_MAX     256     /*!< Maximum size of a Modbus RTU frame. */
  49          #define MB_SER_PDU_SIZE_CRC     2       /*!< Size of CRC field in PDU. */
  50          #define MB_SER_PDU_ADDR_OFF     0       /*!< Offset of slave address in Ser-PDU. */
  51          #define MB_SER_PDU_PDU_OFF      1       /*!< Offset of Modbus-PDU in Ser-PDU. */
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 2   

  52          
  53          /* ----------------------- Type definitions ---------------------------------*/
  54          typedef enum
  55          {
  56              STATE_RX_INIT,              /*!< Receiver is in initial state. */
  57              STATE_RX_IDLE,              /*!< Receiver is in idle state. */
  58              STATE_RX_RCV,               /*!< Frame is beeing received. */
  59              STATE_RX_ERROR              /*!< If the frame is invalid. */
  60          } eMBRcvState;
  61          
  62          typedef enum
  63          {
  64              STATE_TX_IDLE,              /*!< Transmitter is in idle state. */
  65              STATE_TX_XMIT               /*!< Transmitter is in transfer state. */
  66          } eMBSndState;
  67          
  68          /* ----------------------- Static variables ---------------------------------*/
  69          static volatile eMBSndState eSndState;
  70          static volatile eMBRcvState eRcvState;
  71          
  72          volatile UCHAR xdata  ucRTUBuf[MB_SER_PDU_SIZE_MAX];
  73          
  74          static volatile UCHAR xdata *pucSndBufferCur;
  75          static volatile USHORT xdata usSndBufferCount;
  76          
  77          static volatile USHORT xdata usRcvBufferPos;
  78          
  79          /* ----------------------- Start implementation -----------------------------*/
  80          eMBErrorCode
  81          eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
  82          {
  83   1          eMBErrorCode    eStatus = MB_ENOERR;
  84   1          ULONG           usTimerT35_50us;
  85   1      
  86   1          ( void )ucSlaveAddress;
*** WARNING C275 IN LINE 86 OF MODBUS\RTU\MBRTU.C: expression with possibly no effect
  87   1          ENTER_CRITICAL_SECTION(  );
  88   1      
  89   1          /* Modbus RTU uses 8 Databits. */
  90   1          if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
  91   1          {   
  92   2              eStatus = MB_EPORTERR;
  93   2          }
  94   1          else
  95   1          { 
  96   2              /* If baudrate > 19200 then we should use the fixed timer values
  97   2               * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
  98   2               */
  99   2              if( ulBaudRate > 19200 )
 100   2              {
 101   3                  usTimerT35_50us = 35;       /* 1800us. */
 102   3              }
 103   2              else
 104   2              {
 105   3                  /* The timer reload value for a character is given by:
 106   3                   *
 107   3                   * ChTimeValue = Ticks_per_1s / ( Baudrate / 11 )
 108   3                   *             = 11 * Ticks_per_1s / Baudrate
 109   3                   *             = 220000 / Baudrate
 110   3                   * The reload for t3.5 is 1.5 times this value and similary
 111   3                   * for t3.5.
 112   3                   */
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 3   

 113   3                  usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 114   3              } 
 115   2              if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 116   2              {
 117   3                  eStatus = MB_EPORTERR;
 118   3              }
 119   2          } 
 120   1          EXIT_CRITICAL_SECTION(  );
 121   1              eSndState = STATE_TX_IDLE;
 122   1      
 123   1          return eStatus;
 124   1      }
 125          
 126          void
 127          eMBRTUStart( void )
 128          {
 129   1          ENTER_CRITICAL_SECTION(  );
 130   1          /* Initially the receiver is in the state STATE_RX_INIT. we start
 131   1           * the timer and if no character is received within t3.5 we change
 132   1           * to STATE_RX_IDLE. This makes sure that we delay startup of the
 133   1           * modbus protocol stack until the bus is free.
 134   1           */
 135   1          eRcvState = STATE_RX_INIT;
 136   1          vMBPortSerialEnable( TRUE, FALSE );
 137   1          vMBPortTimersEnable(  );
 138   1      
 139   1          EXIT_CRITICAL_SECTION(  );
 140   1      }
 141          
 142          void
 143          eMBRTUStop( void )
 144          {
 145   1          ENTER_CRITICAL_SECTION(  );
 146   1          vMBPortSerialEnable( FALSE, FALSE );
 147   1          vMBPortTimersDisable(  );
 148   1          EXIT_CRITICAL_SECTION(  );
 149   1      }
 150          
 151          eMBErrorCode
 152          eMBRTUReceive( UCHAR xdata *  pucRcvAddress, UCHAR xdata ** xdata  pucFrame, USHORT * pusLength )  
*** WARNING C258 IN LINE 152 OF MODBUS\RTU\MBRTU.C: 'pucFrame': mspace on parameter ignored
*** WARNING C258 IN LINE 152 OF MODBUS\RTU\MBRTU.C: 'pusLength': mspace on parameter ignored
 153          {
 154   1          BOOL            xFrameReceived = FALSE;
 155   1          eMBErrorCode    eStatus = MB_ENOERR;
 156   1      
 157   1          ENTER_CRITICAL_SECTION(  );
 158   1      
 159   1          assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 160   1      //      ucRTUBuf[0]=0x0A;
 161   1      //      ucRTUBuf[1]=0x04;
 162   1      //      ucRTUBuf[2]=0x20;
 163   1      //      ucRTUBuf[3]=0x00;
 164   1      //      ucRTUBuf[4]=0x00;
 165   1      //      ucRTUBuf[5]=0x04;
 166   1      //      ucRTUBuf[6]=0xFB;
 167   1      //      ucRTUBuf[7]=0x72;
 168   1      
 169   1          /* Length and CRC check */
 170   1          if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )&& ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) ==
             - 0 ) )
 171   1          { 
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 4   

 172   2              /* Save the address field. All frames are passed to the upper layed
 173   2               * and the decision if a frame is used is done there.
 174   2               */
 175   2              *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 176   2      
 177   2              /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
 178   2               * size of address field and CRC checksum.
 179   2               */
 180   2              *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 181   2      
 182   2              /* Return the start of the Modbus PDU to the caller. */
 183   2              *pucFrame = ( UCHAR xdata * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 184   2              xFrameReceived = TRUE;  
 185   2          }
 186   1          else
 187   1          { 
 188   2              eStatus = MB_EIO;
 189   2          }
 190   1      
 191   1          EXIT_CRITICAL_SECTION(  );
 192   1          return eStatus;
 193   1      }
 194          
 195          eMBErrorCode
 196          eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR xdata * pucFrame, USHORT usLength )
 197          {
*** WARNING C259 IN LINE 197 OF MODBUS\RTU\MBRTU.C: pointer: different mspace
 198   1          eMBErrorCode    eStatus = MB_ENOERR;
 199   1          USHORT          usCRC16;
 200   1      
 201   1          ENTER_CRITICAL_SECTION(  );
 202   1      
 203   1          /* Check if the receiver is still in idle state. If not we where to
 204   1           * slow with processing the received frame and the master sent another
 205   1           * frame on the network. We have to abort sending the frame.
 206   1           */
 207   1          if( eRcvState == STATE_RX_IDLE )
 208   1          {
 209   2              /* First byte before the Modbus-PDU is the slave address. */
 210   2              pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 211   2              usSndBufferCount = 1;
 212   2      
 213   2              /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
 214   2              pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 215   2              usSndBufferCount += usLength;
 216   2      
 217   2              /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
 218   2              usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 219   2              ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 220   2              ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 221   2      
 222   2              /* Activate the transmitter. */
 223   2              eSndState = STATE_TX_XMIT;
 224   2              vMBPortSerialEnable( FALSE, TRUE );
 225   2                      xMBRTUTransmitFSM();
 226   2          }
 227   1          else
 228   1          {
 229   2              eStatus = MB_EIO;
 230   2          }
 231   1          EXIT_CRITICAL_SECTION(  );
 232   1          return eStatus;
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 5   

 233   1      }
 234          
 235          BOOL
 236          xMBRTUReceiveFSM( void )/* reentrant*/
 237          {
 238   1          BOOL            xTaskNeedSwitch = FALSE;
 239   1          UCHAR           ucByte;
 240   1      
 241   1          assert( eSndState == STATE_TX_IDLE );
 242   1      
 243   1          /* Always read the character. */
 244   1          ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 245   1      
 246   1          switch ( eRcvState )
 247   1          {
 248   2              /* If we have received a character in the init state we have to
 249   2               * wait until the frame is finished.
 250   2               */
 251   2          case STATE_RX_INIT: 
 252   2              vMBPortTimersEnable(  );
 253   2              break;
 254   2      
 255   2              /* In the error state we wait until all characters in the
 256   2               * damaged frame are transmitted.
 257   2               */
 258   2          case STATE_RX_ERROR:
 259   2              vMBPortTimersEnable(  );
 260   2              break;
 261   2      
 262   2              /* In the idle state we wait for a new character. If a character
 263   2               * is received the t1.5 and t3.5 timers are started and the
 264   2               * receiver is in the state STATE_RX_RECEIVCE.
 265   2               */
 266   2          case STATE_RX_IDLE:  
 267   2              usRcvBufferPos = 0;
 268   2              ucRTUBuf[usRcvBufferPos++] = ucByte;
 269   2              eRcvState = STATE_RX_RCV;
 270   2      
 271   2              /* Enable t3.5 timers. */ 
 272   2              vMBPortTimersEnable(  );
 273   2              break;
 274   2      
 275   2              /* We are currently receiving a frame. Reset the timer after
 276   2               * every character received. If more than the maximum possible
 277   2               * number of bytes in a modbus frame is received the frame is
 278   2               * ignored.
 279   2               */
 280   2          case STATE_RX_RCV:   
 281   2              if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 282   2              {
 283   3                  ucRTUBuf[usRcvBufferPos++] = ucByte;
 284   3              }
 285   2              else
 286   2              {
 287   3                  eRcvState = STATE_RX_ERROR;
 288   3              }
 289   2              vMBPortTimersEnable(  );
 290   2              break;
 291   2          }
 292   1          return xTaskNeedSwitch;
 293   1      }
 294          
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 6   

 295          BOOL
 296          xMBRTUTransmitFSM( void )/* reentrant*/
 297          {
 298   1          BOOL            xNeedPoll = FALSE;
 299   1      
 300   1          assert( eRcvState == STATE_RX_IDLE );
 301   1      
 302   1          switch ( eSndState )
 303   1          {
 304   2              /* We should not get a transmitter event if the transmitter is in
 305   2               * idle state.  */
 306   2          case STATE_TX_IDLE:
 307   2              /* enable receiver/disable transmitter. */
 308   2              vMBPortSerialEnable( TRUE, FALSE );
 309   2              break;
 310   2      
 311   2          case STATE_TX_XMIT:
 312   2              /* check if we are finished. */
 313   2              if( usSndBufferCount != 0 )
 314   2              {
 315   3                  xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 316   3                  pucSndBufferCur++;  /* next byte in sendbuffer. */
 317   3                  usSndBufferCount--;
 318   3              }
 319   2              else
 320   2              {
 321   3                  xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 322   3                  /* Disable transmitter. This prevents another transmit buffer
 323   3                   * empty interrupt. */
 324   3                  vMBPortSerialEnable( TRUE, FALSE );
 325   3                  eSndState = STATE_TX_IDLE;
 326   3              }
 327   2              break;
 328   2          }
 329   1      
 330   1          return xNeedPoll;
 331   1      }
 332          
 333          BOOL
 334          xMBRTUTimerT35Expired( void ) /* reentrant*/
 335          {
 336   1          BOOL            xNeedPoll = FALSE;
 337   1      
 338   1          switch ( eRcvState )
 339   1          {
 340   2              /* Timer t35 expired. Startup phase is finished. */
 341   2          case STATE_RX_INIT:
 342   2              xNeedPoll = xMBPortEventPost( EV_READY );
 343   2              break;
 344   2      
 345   2              /* A frame was received and t35 expired. Notify the listener that
 346   2               * a new frame was received. */
 347   2          case STATE_RX_RCV:
 348   2              xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 349   2              break;
 350   2      
 351   2              /* An error occured while receiving the frame. */
 352   2          case STATE_RX_ERROR:
 353   2              break;
 354   2      
 355   2              /* Function called in an illegal state. */
 356   2          default:
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 7   

 357   2              assert( ( eRcvState == STATE_RX_INIT ) ||
 358   2                      ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );     
 359   2                      break;
 360   2          }
 361   1      
 362   1          vMBPortTimersDisable(  );
 363   1          eRcvState = STATE_RX_IDLE;
 364   1      
 365   1          return xNeedPoll;
 366   1      }
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _eMBRTUInit (BEGIN)
                                           ; SOURCE LINE # 81
0000 900000      R     MOV     DPTR,#ucSlaveAddress
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#ucPort
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
000A 900000      R     MOV     DPTR,#eStatus
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
000F C2AF              CLR     EA
                                           ; SOURCE LINE # 90
0011 900000      R     MOV     DPTR,#ucPort
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 C007              PUSH    AR7
0018 900000      R     MOV     DPTR,#ulBaudRate
001B E0                MOVX    A,@DPTR
001C FC                MOV     R4,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FD                MOV     R5,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FE                MOV     R6,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 900000      E     MOV     DPTR,#?_xMBPortSerialInit?BYTE+01H
0029 120000      E     LCALL   ?C?LSTXDATA
002C 900000      E     MOV     DPTR,#?_xMBPortSerialInit?BYTE+05H
002F 7408              MOV     A,#08H
0031 F0                MOVX    @DPTR,A
0032 900000      R     MOV     DPTR,#eParity
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 900000      E     MOV     DPTR,#?_xMBPortSerialInit?BYTE+06H
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
003C D007              POP     AR7
003E 120000      E     LCALL   _xMBPortSerialInit
0041 EF                MOV     A,R7
0042 6401              XRL     A,#01H
0044 6008              JZ      ?C0001
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
0046 900000      R     MOV     DPTR,#eStatus
0049 7403              MOV     A,#03H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
004C 8076              SJMP    ?C0002
004E         ?C0001:
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 99
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 9   

004E 7F00              MOV     R7,#00H
0050 7E4B              MOV     R6,#04BH
0052 7D00              MOV     R5,#00H
0054 7C00              MOV     R4,#00H
0056 900000      R     MOV     DPTR,#ulBaudRate
0059 E0                MOVX    A,@DPTR
005A F8                MOV     R0,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D F9                MOV     R1,A
005E A3                INC     DPTR
005F E0                MOVX    A,@DPTR
0060 FA                MOV     R2,A
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 FB                MOV     R3,A
0064 D3                SETB    C
0065 120000      E     LCALL   ?C?ULCMP
0068 400C              JC      ?C0003
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
006A 900000      R     MOV     DPTR,#usTimerT35_50us
006D 120000      E     LCALL   ?C?LSTKXDATA
0070 00                DB      00H
0071 00                DB      00H
0072 00                DB      00H
0073 23                DB      023H
                                           ; SOURCE LINE # 102
0074 8032              SJMP    ?C0004
0076         ?C0003:
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 113
0076 7F02              MOV     R7,#02H
0078 7E00              MOV     R6,#00H
007A 7D00              MOV     R5,#00H
007C 7C00              MOV     R4,#00H
007E 900000      R     MOV     DPTR,#ulBaudRate
0081 E0                MOVX    A,@DPTR
0082 F8                MOV     R0,A
0083 A3                INC     DPTR
0084 E0                MOVX    A,@DPTR
0085 F9                MOV     R1,A
0086 A3                INC     DPTR
0087 E0                MOVX    A,@DPTR
0088 FA                MOV     R2,A
0089 A3                INC     DPTR
008A E0                MOVX    A,@DPTR
008B FB                MOV     R3,A
008C 120000      E     LCALL   ?C?LMUL
008F A804              MOV     R0,AR4
0091 A905              MOV     R1,AR5
0093 AA06              MOV     R2,AR6
0095 AB07              MOV     R3,AR7
0097 7FA0              MOV     R7,#0A0H
0099 7E7F              MOV     R6,#07FH
009B 7D17              MOV     R5,#017H
009D 7C00              MOV     R4,#00H
009F 120000      E     LCALL   ?C?ULDIV
00A2 900000      R     MOV     DPTR,#usTimerT35_50us
00A5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 114
00A8         ?C0004:
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 10  

                                           ; SOURCE LINE # 115
00A8 900000      R     MOV     DPTR,#usTimerT35_50us
00AB E0                MOVX    A,@DPTR
00AC FC                MOV     R4,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF FD                MOV     R5,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 FE                MOV     R6,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 120000      E     LCALL   _xMBPortTimersInit
00B9 EF                MOV     A,R7
00BA 6401              XRL     A,#01H
00BC 6006              JZ      ?C0002
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
00BE 900000      R     MOV     DPTR,#eStatus
00C1 7403              MOV     A,#03H
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
00C4         ?C0005:
                                           ; SOURCE LINE # 119
00C4         ?C0002:
                                           ; SOURCE LINE # 120
00C4 D2AF              SETB    EA
                                           ; SOURCE LINE # 121
00C6 900000      R     MOV     DPTR,#eSndState
00C9 E4                CLR     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
00CB 900000      R     MOV     DPTR,#eStatus
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
                                           ; SOURCE LINE # 124
00D0         ?C0006:
00D0 22                RET     
             ; FUNCTION _eMBRTUInit (END)

             ; FUNCTION eMBRTUStart (BEGIN)
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 135
0002 900000      R     MOV     DPTR,#eRcvState
0005 E4                CLR     A
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0007 7D00              MOV     R5,#00H
0009 7F01              MOV     R7,#01H
000B 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 137
000E 120000      E     LCALL   vMBPortTimersEnable
                                           ; SOURCE LINE # 139
0011 D2AF              SETB    EA
                                           ; SOURCE LINE # 140
0013         ?C0007:
0013 22                RET     
             ; FUNCTION eMBRTUStart (END)
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 11  


             ; FUNCTION eMBRTUStop (BEGIN)
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 146
0002 7D00              MOV     R5,#00H
0004 7F00              MOV     R7,#00H
0006 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 147
0009 120000      E     LCALL   vMBPortTimersDisable
                                           ; SOURCE LINE # 148
000C D2AF              SETB    EA
                                           ; SOURCE LINE # 149
000E         ?C0008:
000E 22                RET     
             ; FUNCTION eMBRTUStop (END)

             ; FUNCTION _eMBRTUReceive (BEGIN)
                                           ; SOURCE LINE # 152
0000 900000      R     MOV     DPTR,#pucRcvAddress
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#pucFrame
000B EB                MOV     A,R3
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EA                MOV     A,R2
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 E9                MOV     A,R1
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0013 900000      R     MOV     DPTR,#xFrameReceived
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
0018 900000      R     MOV     DPTR,#eStatus
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
001D C2AF              CLR     EA
                                           ; SOURCE LINE # 170
001F 900000      R     MOV     DPTR,#usRcvBufferPos
0022 E0                MOVX    A,@DPTR
0023 FE                MOV     R6,A
0024 A3                INC     DPTR
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 C3                CLR     C
0028 EF                MOV     A,R7
0029 9404              SUBB    A,#04H
002B EE                MOV     A,R6
002C 9400              SUBB    A,#00H
002E 4066              JC      ?C0009
0030 7B01              MOV     R3,#01H
0032 7A00        R     MOV     R2,#HIGH ucRTUBuf
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 12  

0034 7900        R     MOV     R1,#LOW ucRTUBuf
0036 900000      R     MOV     DPTR,#usRcvBufferPos
0039 E0                MOVX    A,@DPTR
003A FC                MOV     R4,A
003B A3                INC     DPTR
003C E0                MOVX    A,@DPTR
003D FD                MOV     R5,A
003E 120000      E     LCALL   _usMBCRC16
0041 EF                MOV     A,R7
0042 4E                ORL     A,R6
0043 7051              JNZ     ?C0009
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 175
0045 900000      R     MOV     DPTR,#ucRTUBuf
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A 900000      R     MOV     DPTR,#pucRcvAddress
004D E0                MOVX    A,@DPTR
004E FC                MOV     R4,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 FD                MOV     R5,A
0052 8D82              MOV     DPL,R5
0054 8C83              MOV     DPH,R4
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
0058 900000      R     MOV     DPTR,#usRcvBufferPos
005B E0                MOVX    A,@DPTR
005C FE                MOV     R6,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 24FD              ADD     A,#0FDH
0063 FF                MOV     R7,A
0064 EE                MOV     A,R6
0065 34FF              ADDC    A,#0FFH
0067 FE                MOV     R6,A
0068 900000      R     MOV     DPTR,#pusLength
006B E0                MOVX    A,@DPTR
006C FB                MOV     R3,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FA                MOV     R2,A
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 F9                MOV     R1,A
0073 EE                MOV     A,R6
0074 8FF0              MOV     B,R7
0076 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 183
0079 7E00        R     MOV     R6,#HIGH ucRTUBuf+01H
007B 7F00        R     MOV     R7,#LOW ucRTUBuf+01H
007D 900000      R     MOV     DPTR,#pucFrame
0080 E0                MOVX    A,@DPTR
0081 FB                MOV     R3,A
0082 A3                INC     DPTR
0083 E0                MOVX    A,@DPTR
0084 FA                MOV     R2,A
0085 A3                INC     DPTR
0086 E0                MOVX    A,@DPTR
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 13  

0087 F9                MOV     R1,A
0088 EE                MOV     A,R6
0089 8FF0              MOV     B,R7
008B 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 184
008E 900000      R     MOV     DPTR,#xFrameReceived
0091 7401              MOV     A,#01H
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
0094 8006              SJMP    ?C0010
0096         ?C0009:
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0096 900000      R     MOV     DPTR,#eStatus
0099 7405              MOV     A,#05H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
009C         ?C0010:
                                           ; SOURCE LINE # 191
009C D2AF              SETB    EA
                                           ; SOURCE LINE # 192
009E 900000      R     MOV     DPTR,#eStatus
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
                                           ; SOURCE LINE # 193
00A3         ?C0011:
00A3 22                RET     
             ; FUNCTION _eMBRTUReceive (END)

             ; FUNCTION _eMBRTUSend (BEGIN)
                                           ; SOURCE LINE # 196
0000 900000      R     MOV     DPTR,#ucSlaveAddress
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#pucFrame
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#usLength
0010 EA                MOV     A,R2
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EB                MOV     A,R3
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0015 900000      R     MOV     DPTR,#eStatus
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
001A C2AF              CLR     EA
                                           ; SOURCE LINE # 207
001C 900000      R     MOV     DPTR,#eRcvState
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 6401              XRL     A,#01H
0024 6003              JZ      $ + 5H
0026 020000      R     LJMP    ?C0012
                                           ; SOURCE LINE # 208
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 14  

                                           ; SOURCE LINE # 210
0029 900000      R     MOV     DPTR,#pucFrame
002C E0                MOVX    A,@DPTR
002D FE                MOV     R6,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 24FF              ADD     A,#0FFH
0034 FF                MOV     R7,A
0035 EE                MOV     A,R6
0036 34FF              ADDC    A,#0FFH
0038 FE                MOV     R6,A
0039 900000      R     MOV     DPTR,#pucSndBufferCur
003C EE                MOV     A,R6
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
0041 900000      R     MOV     DPTR,#usSndBufferCount
0044 E4                CLR     A
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 7401              MOV     A,#01H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
004A 900000      R     MOV     DPTR,#ucSlaveAddress
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 900000      R     MOV     DPTR,#pucSndBufferCur
0052 E0                MOVX    A,@DPTR
0053 FC                MOV     R4,A
0054 A3                INC     DPTR
0055 E0                MOVX    A,@DPTR
0056 FD                MOV     R5,A
0057 8D82              MOV     DPL,R5
0059 8C83              MOV     DPH,R4
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
005D 900000      R     MOV     DPTR,#usLength
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 900000      R     MOV     DPTR,#usSndBufferCount+01H
0068 E0                MOVX    A,@DPTR
0069 2F                ADD     A,R7
006A F0                MOVX    @DPTR,A
006B 900000      R     MOV     DPTR,#usSndBufferCount
006E E0                MOVX    A,@DPTR
006F 3E                ADDC    A,R6
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
0071 900000      R     MOV     DPTR,#pucSndBufferCur
0074 E0                MOVX    A,@DPTR
0075 FE                MOV     R6,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 15  

0079 AA06              MOV     R2,AR6
007B A907              MOV     R1,AR7
007D 7B01              MOV     R3,#01H
007F 900000      R     MOV     DPTR,#usSndBufferCount
0082 E0                MOVX    A,@DPTR
0083 FC                MOV     R4,A
0084 A3                INC     DPTR
0085 E0                MOVX    A,@DPTR
0086 FD                MOV     R5,A
0087 120000      E     LCALL   _usMBCRC16
008A 900000      R     MOV     DPTR,#usCRC16
008D EE                MOV     A,R6
008E F0                MOVX    @DPTR,A
008F A3                INC     DPTR
0090 EF                MOV     A,R7
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0092 900000      R     MOV     DPTR,#usCRC16
0095 E0                MOVX    A,@DPTR
0096 FE                MOV     R6,A
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A EF                MOV     A,R7
009B 54FF              ANL     A,#0FFH
009D FF                MOV     R7,A
009E 900000      R     MOV     DPTR,#usSndBufferCount
00A1 E4                CLR     A
00A2 75F001            MOV     B,#01H
00A5 120000      E     LCALL   ?C?ILDIX
00A8 ADF0              MOV     R5,B
00AA FC                MOV     R4,A
00AB 7400        R     MOV     A,#LOW ucRTUBuf
00AD 2D                ADD     A,R5
00AE F582              MOV     DPL,A
00B0 7400        R     MOV     A,#HIGH ucRTUBuf
00B2 3C                ADDC    A,R4
00B3 F583              MOV     DPH,A
00B5 EF                MOV     A,R7
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
00B7 900000      R     MOV     DPTR,#usCRC16
00BA E0                MOVX    A,@DPTR
00BB FE                MOV     R6,A
00BC A3                INC     DPTR
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
00BF EE                MOV     A,R6
00C0 FF                MOV     R7,A
00C1 7E00              MOV     R6,#00H
00C3 900000      R     MOV     DPTR,#usSndBufferCount
00C6 E4                CLR     A
00C7 75F001            MOV     B,#01H
00CA 120000      E     LCALL   ?C?ILDIX
00CD ADF0              MOV     R5,B
00CF FC                MOV     R4,A
00D0 7400        R     MOV     A,#LOW ucRTUBuf
00D2 2D                ADD     A,R5
00D3 F582              MOV     DPL,A
00D5 7400        R     MOV     A,#HIGH ucRTUBuf
00D7 3C                ADDC    A,R4
00D8 F583              MOV     DPH,A
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 16  

00DA EF                MOV     A,R7
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
00DC 900000      R     MOV     DPTR,#eSndState
00DF 7401              MOV     A,#01H
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
00E2 7D01              MOV     R5,#01H
00E4 7F00              MOV     R7,#00H
00E6 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 225
00E9 120000      R     LCALL   xMBRTUTransmitFSM
                                           ; SOURCE LINE # 226
00EC 8006              SJMP    ?C0013
00EE         ?C0012:
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
00EE 900000      R     MOV     DPTR,#eStatus
00F1 7405              MOV     A,#05H
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
00F4         ?C0013:
                                           ; SOURCE LINE # 231
00F4 D2AF              SETB    EA
                                           ; SOURCE LINE # 232
00F6 900000      R     MOV     DPTR,#eStatus
00F9 E0                MOVX    A,@DPTR
00FA FF                MOV     R7,A
                                           ; SOURCE LINE # 233
00FB         ?C0014:
00FB 22                RET     
             ; FUNCTION _eMBRTUSend (END)

             ; FUNCTION xMBRTUReceiveFSM (BEGIN)
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0000 900000      R     MOV     DPTR,#xTaskNeedSwitch
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0005 7B01              MOV     R3,#01H
0007 7A00        R     MOV     R2,#HIGH ucByte
0009 7900        R     MOV     R1,#LOW ucByte
000B 120000      E     LCALL   _xMBPortSerialGetByte
                                           ; SOURCE LINE # 246
000E 900000      R     MOV     DPTR,#eRcvState
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 120000      E     LCALL   ?C?CCASE
0017 0000        R     DW      ?C0016
0019 00                DB      00H
001A 0000        R     DW      ?C0018
001C 01                DB      01H
001D 0000        R     DW      ?C0019
001F 02                DB      02H
0020 0000        R     DW      ?C0017
0022 03                DB      03H
0023 0000              DW      00H
0025 0000        R     DW      ?C0015
                                           ; SOURCE LINE # 247
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 17  

                                           ; SOURCE LINE # 251
0027         ?C0016:
                                           ; SOURCE LINE # 252
0027 120000      E     LCALL   vMBPortTimersEnable
                                           ; SOURCE LINE # 253
002A 806D              SJMP    ?C0015
                                           ; SOURCE LINE # 258
002C         ?C0017:
                                           ; SOURCE LINE # 259
002C 120000      E     LCALL   vMBPortTimersEnable
                                           ; SOURCE LINE # 260
002F 8068              SJMP    ?C0015
                                           ; SOURCE LINE # 266
0031         ?C0018:
                                           ; SOURCE LINE # 267
0031 900000      R     MOV     DPTR,#usRcvBufferPos
0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 E4                CLR     A
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
0039 900000      R     MOV     DPTR,#ucByte
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E 900000      R     MOV     DPTR,#usRcvBufferPos
0041 E4                CLR     A
0042 75F001            MOV     B,#01H
0045 120000      E     LCALL   ?C?ILDIX
0048 ADF0              MOV     R5,B
004A FC                MOV     R4,A
004B 7400        R     MOV     A,#LOW ucRTUBuf
004D 2D                ADD     A,R5
004E F582              MOV     DPL,A
0050 7400        R     MOV     A,#HIGH ucRTUBuf
0052 3C                ADDC    A,R4
0053 F583              MOV     DPH,A
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
0057 900000      R     MOV     DPTR,#eRcvState
005A 7402              MOV     A,#02H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
005D 120000      E     LCALL   vMBPortTimersEnable
                                           ; SOURCE LINE # 273
0060 8037              SJMP    ?C0015
                                           ; SOURCE LINE # 280
0062         ?C0019:
                                           ; SOURCE LINE # 281
0062 900000      R     MOV     DPTR,#usRcvBufferPos
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A C3                CLR     C
006B EE                MOV     A,R6
006C 9401              SUBB    A,#01H
006E 5020              JNC     ?C0020
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 18  

0070 900000      R     MOV     DPTR,#ucByte
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 900000      R     MOV     DPTR,#usRcvBufferPos
0078 E4                CLR     A
0079 75F001            MOV     B,#01H
007C 120000      E     LCALL   ?C?ILDIX
007F ADF0              MOV     R5,B
0081 FC                MOV     R4,A
0082 7400        R     MOV     A,#LOW ucRTUBuf
0084 2D                ADD     A,R5
0085 F582              MOV     DPL,A
0087 7400        R     MOV     A,#HIGH ucRTUBuf
0089 3C                ADDC    A,R4
008A F583              MOV     DPH,A
008C EF                MOV     A,R7
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
008E 8006              SJMP    ?C0021
0090         ?C0020:
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0090 900000      R     MOV     DPTR,#eRcvState
0093 7403              MOV     A,#03H
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
0096         ?C0021:
                                           ; SOURCE LINE # 289
0096 120000      E     LCALL   vMBPortTimersEnable
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
0099         ?C0015:
                                           ; SOURCE LINE # 292
0099 900000      R     MOV     DPTR,#xTaskNeedSwitch
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
                                           ; SOURCE LINE # 293
009E         ?C0022:
009E 22                RET     
             ; FUNCTION xMBRTUReceiveFSM (END)

             ; FUNCTION xMBRTUTransmitFSM (BEGIN)
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
0000 900000      R     MOV     DPTR,#xNeedPoll
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
0005 900000      R     MOV     DPTR,#eSndState
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 120000      E     LCALL   ?C?CCASE
000E 0000        R     DW      ?C0024
0010 00                DB      00H
0011 0000        R     DW      ?C0025
0013 01                DB      01H
0014 0000              DW      00H
0016 0000        R     DW      ?C0023
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 306
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 19  

0018         ?C0024:
                                           ; SOURCE LINE # 308
0018 7D00              MOV     R5,#00H
001A 7F01              MOV     R7,#01H
001C 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 309
001F 8051              SJMP    ?C0023
                                           ; SOURCE LINE # 311
0021         ?C0025:
                                           ; SOURCE LINE # 313
0021 900000      R     MOV     DPTR,#usSndBufferCount
0024 E0                MOVX    A,@DPTR
0025 FE                MOV     R6,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4E                ORL     A,R6
002B 602F              JZ      ?C0026
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
002D 900000      R     MOV     DPTR,#pucSndBufferCur
0030 E0                MOVX    A,@DPTR
0031 FE                MOV     R6,A
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 8F82              MOV     DPL,R7
0037 8E83              MOV     DPH,R6
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 120000      E     LCALL   _xMBPortSerialPutByte
                                           ; SOURCE LINE # 316
003E 900000      R     MOV     DPTR,#pucSndBufferCur+01H
0041 E0                MOVX    A,@DPTR
0042 04                INC     A
0043 F0                MOVX    @DPTR,A
0044 7006              JNZ     ?C0035
0046 900000      R     MOV     DPTR,#pucSndBufferCur
0049 E0                MOVX    A,@DPTR
004A 04                INC     A
004B F0                MOVX    @DPTR,A
004C         ?C0035:
                                           ; SOURCE LINE # 317
004C 900000      R     MOV     DPTR,#usSndBufferCount+01H
004F E0                MOVX    A,@DPTR
0050 24FF              ADD     A,#0FFH
0052 F0                MOVX    @DPTR,A
0053 900000      R     MOV     DPTR,#usSndBufferCount
0056 E0                MOVX    A,@DPTR
0057 34FF              ADDC    A,#0FFH
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
005A 8016              SJMP    ?C0023
005C         ?C0026:
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
005C 7F03              MOV     R7,#03H
005E 120000      E     LCALL   _xMBPortEventPost
0061 900000      R     MOV     DPTR,#xNeedPoll
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 20  

                                           ; SOURCE LINE # 324
0066 7D00              MOV     R5,#00H
0068 7F01              MOV     R7,#01H
006A 120000      E     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 325
006D 900000      R     MOV     DPTR,#eSndState
0070 E4                CLR     A
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
0072         ?C0027:
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
0072         ?C0023:
                                           ; SOURCE LINE # 330
0072 900000      R     MOV     DPTR,#xNeedPoll
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
                                           ; SOURCE LINE # 331
0077         ?C0028:
0077 22                RET     
             ; FUNCTION xMBRTUTransmitFSM (END)

             ; FUNCTION xMBRTUTimerT35Expired (BEGIN)
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
0000 900000      R     MOV     DPTR,#xNeedPoll
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
0005 900000      R     MOV     DPTR,#eRcvState
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 120000      E     LCALL   ?C?CCASE
000E 0000        R     DW      ?C0030
0010 00                DB      00H
0011 0000        R     DW      ?C0031
0013 02                DB      02H
0014 0000        R     DW      ?C0029
0016 03                DB      03H
0017 0000              DW      00H
0019 0000        R     DW      ?C0029
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 341
001B         ?C0030:
                                           ; SOURCE LINE # 342
001B 7F00              MOV     R7,#00H
001D 120000      E     LCALL   _xMBPortEventPost
0020 900000      R     MOV     DPTR,#xNeedPoll
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
0025 800A              SJMP    ?C0029
                                           ; SOURCE LINE # 347
0027         ?C0031:
                                           ; SOURCE LINE # 348
0027 7F01              MOV     R7,#01H
0029 120000      E     LCALL   _xMBPortEventPost
002C 900000      R     MOV     DPTR,#xNeedPoll
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 21  

                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 352
0031         ?C0032:
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 356
0031         ?C0033:
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
0031         ?C0029:
                                           ; SOURCE LINE # 362
0031 120000      E     LCALL   vMBPortTimersDisable
                                           ; SOURCE LINE # 363
0034 900000      R     MOV     DPTR,#eRcvState
0037 7401              MOV     A,#01H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
003A 900000      R     MOV     DPTR,#xNeedPoll
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
                                           ; SOURCE LINE # 366
003F         ?C0034:
003F 22                RET     
             ; FUNCTION xMBRTUTimerT35Expired (END)

C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 22  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_eMBRTUSend. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucSlaveAddress . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  pucFrame . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  2
  usLength . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0003H  2
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  usCRC16. . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
eMBErrorCode . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
eMBRTUStart. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
EV_FRAME_SENT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ULONG. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
ADCSTAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
_eMBRTUInit. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucSlaveAddress . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ucPort . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  ulBaudRate . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0002H  4
  eParity. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
  usTimerT35_50us. . . . . . . . . . .  AUTO     XDATA  U_LONG   0008H  4
pxMBFunctionHandler. . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
MB_PAR_ODD . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_RX_IDLE. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
pvMBFrameStop. . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
STATE_TX_IDLE. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_SLAVE_BUSY . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eSndState. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
EV_EXECUTE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SHORT. . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
EV_FRAME_RECEIVED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eRcvState. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
MB_EX_ACKNOWLEDGE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
xMBFunctionHandler . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  ucFunctionCode . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  pxHandler. . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
MB_EX_GATEWAY_PATH_FAILED. . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBRTUStop . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
MB_EILLSTATE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
peMBFrameReceive . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
xMBRTUTimerT35Expired. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  xNeedPoll. . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
MB_EX_NONE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CHAR . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
eMBEventType . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
I2CCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
eMBSndState. . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
STATE_RX_INIT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ETIMEDOUT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
eMBRcvState. . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
usRcvBufferPos . . . . . . . . . . . .  STATIC   XDATA  U_INT    0002H  2
eMBException . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_xMBPortSerialInit . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 23  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


BOOL . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
MB_EINVAL. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LONG . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
MB_ENOREG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_TX_XMIT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
xMBRTUReceiveFSM . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  xTaskNeedSwitch. . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
  ucByte . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
MB_EX_ILLEGAL_FUNCTION . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
_usMBCRC16 . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_eMBRTUReceive . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  pucRcvAddress. . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  2
  pucFrame . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  pusLength. . . . . . . . . . . . . .  AUTO     XDATA  PTR      0005H  3
  xFrameReceived . . . . . . . . . . .  AUTO     XDATA  CHAR     0008H  1
  eStatus. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0009H  1
MB_REG_WRITE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ENOERR. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ENORES. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_xMBPortTimersInit . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
xMBRTUTransmitFSM. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  xNeedPoll. . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
MB_EX_ILLEGAL_DATA_VALUE . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBRegisterMode. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
MB_REG_READ. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EIO . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_xMBPortSerialGetByte. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SPICON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
MB_EX_ILLEGAL_DATA_ADDRESS . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_TCP . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATE_RX_RCV . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ASCII . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_GATEWAY_TGT_FAILED . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_vMBPortSerialEnable . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
pvMBFrameClose . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
_xMBPortEventPost. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
vMBPortTimersDisable . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
peMBFrameSend. . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
MB_PAR_EVEN. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_PAR_NONE. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EPORTERR. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_xMBPortSerialPutByte. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
USHORT . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
MB_EX_SLAVE_DEVICE_FAILURE . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_RTU . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
MB_EX_MEMORY_PARITY_ERROR. . . . . . .  E_CONST  -----  U_CHAR   -----  1
vMBPortTimersEnable. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
eMBParity. . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
EV_READY . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ucRTUBuf . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0004H  256
UCHAR. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
pvMBFrameStart . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
STATE_RX_ERROR . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   MBRTU                                                                 06/19/2014 16:55:32 PAGE 24  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
usSndBufferCount . . . . . . . . . . .  STATIC   XDATA  U_INT    0104H  2
pucSndBufferCur. . . . . . . . . . . .  STATIC   XDATA  PTR      0106H  2
eMBMode. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1003    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    298    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  6 WARNING(S),  0 ERROR(S)
