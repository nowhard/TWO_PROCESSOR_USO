C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE PORTSERIAL
OBJECT MODULE PLACED IN portserial.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE port\portserial.c LARGE OPTIMIZE(0,SPEED) BROWSE MODAB2 INCDI
                    -R(.\modbus\include;.\modbus;.\port;.\modbus\ascii;.\modbus\rtu;..\uUSO_MASTER) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\p
                    -ortserial.lst) OBJECT(portserial.obj)

line level    source

   1          #include <ADuC845.h>
   2          
   3          #include "port.h"
   4          #include "timer3.h"
   5          
   6          /* ----------------------- Modbus includes ----------------------------------*/
   7          #include "mb.h"
*** WARNING C258 IN LINE 41 OF .\MODBUS\RTU\MBRTU.H: 'pucFrame': mspace on parameter ignored
*** WARNING C258 IN LINE 41 OF .\MODBUS\RTU\MBRTU.H: 'pusLength': mspace on parameter ignored
   8          #include "mbport.h"
   9          
  10          /* ----------------------- static functions ---------------------------------*/
  11          static void prvvUARTTxReadyISR( void );
  12          static void prvvUARTRxISR( void );
  13          
  14          static unsigned char TxEnable;
  15          
  16          sbit TEST_UART=P2^7;
  17          
  18          void
  19          vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
  20          {
  21   1          /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  22   1           * transmitter empty interrupts.
  23   1           */
  24   1      
  25   1          if(xRxEnable && xTxEnable)
  26   1          {
  27   2                      TxEnable = 1;
  28   2                      REN = 1;//
  29   2                      ES = 1;//
  30   2          } else if(!xRxEnable && xTxEnable) {
  31   2                      TxEnable = 1;
  32   2                      REN = 0;//
  33   2                      ES = 1;//
  34   2          } else if(xRxEnable && !xTxEnable) {
  35   2                      TxEnable = 0;
  36   2                      REN = 1;//
  37   2                      ES = 1;//
  38   2              } else {
  39   2                      TxEnable = 0;
  40   2                      REN = 0;//
  41   2                      ES = 0;//
  42   2          }
  43   1      }
  44          
  45          BOOL
  46          xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
  47          {
  48   1          UCHAR ucUCSRC = 0;
  49   1      
  50   1      
  51   1              UART_Init();
C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 2   

  52   1      
  53   1      
  54   1          vMBPortSerialEnable( FALSE, FALSE );
  55   1      
  56   1      /*#ifdef RTS_ENABLE
  57   1          RTS_INIT;
  58   1      #endif  */
  59   1              TxEnable = 0; 
  60   1          return TRUE;
  61   1      }
*** WARNING C280 IN LINE 46 OF PORT\PORTSERIAL.C: 'ucPORT': unreferenced local variable
*** WARNING C280 IN LINE 46 OF PORT\PORTSERIAL.C: 'ulBaudRate': unreferenced local variable
*** WARNING C280 IN LINE 46 OF PORT\PORTSERIAL.C: 'ucDataBits': unreferenced local variable
*** WARNING C280 IN LINE 46 OF PORT\PORTSERIAL.C: 'eParity': unreferenced local variable
  62          
  63          /*BOOL
  64          xMBPortSerialPutByte( CHAR ucByte )
  65          {
  66              SBUF = ucByte;
  67              return TRUE;
  68          }
  69          
  70          BOOL
  71          xMBPortSerialGetByte( CHAR * pucByte )
  72          {
  73              *pucByte = SBUF;
  74              return TRUE;
  75          }
  76          
  77          
  78          
  79          void UART_ISR(void) interrupt 4 //using 1
  80          {       
  81                  EA=0;   //запрет прерывания
  82                  
  83                  if(RI)
  84                  {
  85                          RI=0; 
  86                          pxMBFrameCBByteReceived(  );
  87                  }
  88          
  89                  if(TI)
  90                  {
  91                          TI=0;
  92                          #ifdef RTS_ENABLE
  93                              RTS_LOW;
  94                          #endif
  95                          pxMBFrameCBTransmitterEmpty(  );
  96                  }
  97          }  */
  98          
  99          
 100          BOOL
 101          xMBPortSerialPutByte( CHAR ucByte )
 102          {
 103   1          /* Put a byte in the UARTs transmit buffer. This function is called
 104   1           * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
 105   1           * called. */
 106   1              SBUF = ucByte;
 107   1          return TRUE;
 108   1      }
 109          
C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 3   

 110          BOOL
 111          xMBPortSerialGetByte( CHAR * pucByte )
 112          {
 113   1          /* Return the byte in the UARTs receive buffer. This function is called
 114   1           * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
 115   1           */
 116   1              *pucByte = SBUF;
 117   1          return TRUE;
 118   1      }
 119          
 120          /* Create an interrupt handler for the transmit buffer empty interrupt
 121           * (or an equivalent) for your target processor. This function should then
 122           * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 123           * a new character can be sent. The protocol stack will then call 
 124           * xMBPortSerialPutByte( ) to send the character.
 125           */
 126          static void prvvUARTTxReadyISR( void )
 127          {
 128   1      //    pxMBFrameCBTransmitterEmpty(  );
 129   1              if(eMBCurrentMode==MB_RTU){
 130   2                      xMBRTUTransmitFSM();
 131   2              }else if(eMBCurrentMode==MB_ASCII){
 132   2                      xMBASCIITransmitFSM();
 133   2              }
 134   1      }
 135          /* Create an interrupt handler for the receive interrupt for your target
 136           * processor. This function should then call pxMBFrameCBByteReceived( ). The
 137           * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 138           * character.
 139           */
 140          static void prvvUARTRxISR( void )
 141          {               
 142   1      //    pxMBFrameCBByteReceived(  );        
 143   1              if(eMBCurrentMode==MB_RTU){      
 144   2                      xMBRTUReceiveFSM();       
 145   2              }else if(eMBCurrentMode==MB_ASCII){
 146   2                      xMBASCIIReceiveFSM();
 147   2              }
 148   1      }
 149          
 150          
 151          void UartISR(void) interrupt 4
 152          {
 153   1      ENTER_CRITICAL_SECTION( );
 154   1              if(RI){
 155   2                      RI = 0; 
 156   2                      prvvUARTRxISR(); 
 157   2      
 158   2                      TEST_UART=~TEST_UART;   
 159   2              }
 160   1         
 161   1              if(TI){
 162   2                      TI = 0;
 163   2                      if(TxEnable){
 164   3                              prvvUARTTxReadyISR();
 165   3                      }
 166   2              }
 167   1      EXIT_CRITICAL_SECTION( );
 168   1      }  
 169          
 170          void            
 171          vMBPortClose( void )
C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 4   

 172          {
 173   1      
 174   1      
 175   1      }
C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _vMBPortSerialEnable (BEGIN)
                                           ; SOURCE LINE # 19
0000 900000      R     MOV     DPTR,#xRxEnable
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#xTxEnable
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 20
                                           ; SOURCE LINE # 25
000A 900000      R     MOV     DPTR,#xRxEnable
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 6013              JZ      ?C0001
0012 900000      R     MOV     DPTR,#xTxEnable
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 600B              JZ      ?C0001
                                           ; SOURCE LINE # 26
                                           ; SOURCE LINE # 27
001A 900000      R     MOV     DPTR,#TxEnable
001D 7401              MOV     A,#01H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 28
0020 D29C              SETB    REN
                                           ; SOURCE LINE # 29
0022 D2AC              SETB    ES
                                           ; SOURCE LINE # 30
0024 22                RET     
0025         ?C0001:
0025 900000      R     MOV     DPTR,#xRxEnable
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B 7013              JNZ     ?C0003
002D 900000      R     MOV     DPTR,#xTxEnable
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 600B              JZ      ?C0003
                                           ; SOURCE LINE # 31
0035 900000      R     MOV     DPTR,#TxEnable
0038 7401              MOV     A,#01H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 32
003B C29C              CLR     REN
                                           ; SOURCE LINE # 33
003D D2AC              SETB    ES
                                           ; SOURCE LINE # 34
003F 22                RET     
0040         ?C0003:
0040 900000      R     MOV     DPTR,#xRxEnable
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 6012              JZ      ?C0005
0048 900000      R     MOV     DPTR,#xTxEnable
C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 6   

004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 700A              JNZ     ?C0005
                                           ; SOURCE LINE # 35
0050 900000      R     MOV     DPTR,#TxEnable
0053 E4                CLR     A
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 36
0055 D29C              SETB    REN
                                           ; SOURCE LINE # 37
0057 D2AC              SETB    ES
                                           ; SOURCE LINE # 38
0059 22                RET     
005A         ?C0005:
                                           ; SOURCE LINE # 39
005A 900000      R     MOV     DPTR,#TxEnable
005D E4                CLR     A
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 40
005F C29C              CLR     REN
                                           ; SOURCE LINE # 41
0061 C2AC              CLR     ES
                                           ; SOURCE LINE # 42
0063         ?C0006:
0063         ?C0004:
0063         ?C0002:
                                           ; SOURCE LINE # 43
0063         ?C0007:
0063 22                RET     
             ; FUNCTION _vMBPortSerialEnable (END)

             ; FUNCTION _xMBPortSerialInit (BEGIN)
                                           ; SOURCE LINE # 46
0000 900000      R     MOV     DPTR,#ucPORT
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0005 900000      R     MOV     DPTR,#ucUCSRC
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
000A 120000      E     LCALL   UART_Init
                                           ; SOURCE LINE # 54
000D 7D00              MOV     R5,#00H
000F 7F00              MOV     R7,#00H
0011 120000      R     LCALL   _vMBPortSerialEnable
                                           ; SOURCE LINE # 59
0014 900000      R     MOV     DPTR,#TxEnable
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
0019 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 61
001B         ?C0008:
001B 22                RET     
             ; FUNCTION _xMBPortSerialInit (END)

             ; FUNCTION _xMBPortSerialPutByte (BEGIN)
                                           ; SOURCE LINE # 101
0000 900000      R     MOV     DPTR,#ucByte
C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 7   

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 106
0005 900000      R     MOV     DPTR,#ucByte
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 8F99              MOV     SBUF,R7
                                           ; SOURCE LINE # 107
000C 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 108
000E         ?C0009:
000E 22                RET     
             ; FUNCTION _xMBPortSerialPutByte (END)

             ; FUNCTION _xMBPortSerialGetByte (BEGIN)
                                           ; SOURCE LINE # 111
0000 900000      R     MOV     DPTR,#pucByte
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 116
000B 900000      R     MOV     DPTR,#pucByte
000E E0                MOVX    A,@DPTR
000F FB                MOV     R3,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FA                MOV     R2,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 F9                MOV     R1,A
0016 E599              MOV     A,SBUF
0018 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 117
001B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 118
001D         ?C0010:
001D 22                RET     
             ; FUNCTION _xMBPortSerialGetByte (END)

             ; FUNCTION prvvUARTTxReadyISR (BEGIN)
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 129
0000 900000      E     MOV     DPTR,#eMBCurrentMode
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7004              JNZ     ?C0011
                                           ; SOURCE LINE # 130
0008 120000      E     LCALL   xMBRTUTransmitFSM
                                           ; SOURCE LINE # 131
000B 22                RET     
000C         ?C0011:
000C 900000      E     MOV     DPTR,#eMBCurrentMode
000F E0                MOVX    A,@DPTR
C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 8   

0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 B40103            CJNE    A,#01H,?C0014
                                           ; SOURCE LINE # 132
0015 120000      E     LCALL   _?xMBASCIITransmitFSM
                                           ; SOURCE LINE # 133
0018         ?C0013:
0018         ?C0012:
                                           ; SOURCE LINE # 134
0018         ?C0014:
0018 22                RET     
             ; FUNCTION prvvUARTTxReadyISR (END)

             ; FUNCTION prvvUARTRxISR (BEGIN)
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 143
0000 900000      E     MOV     DPTR,#eMBCurrentMode
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7004              JNZ     ?C0015
                                           ; SOURCE LINE # 144
0008 120000      E     LCALL   xMBRTUReceiveFSM
                                           ; SOURCE LINE # 145
000B 22                RET     
000C         ?C0015:
000C 900000      E     MOV     DPTR,#eMBCurrentMode
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 B40103            CJNE    A,#01H,?C0018
                                           ; SOURCE LINE # 146
0015 120000      E     LCALL   _?xMBASCIIReceiveFSM
                                           ; SOURCE LINE # 147
0018         ?C0017:
0018         ?C0016:
                                           ; SOURCE LINE # 148
0018         ?C0018:
0018 22                RET     
             ; FUNCTION prvvUARTRxISR (END)

             ; FUNCTION UartISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 05A7              INC     DPCON
000A C083              PUSH    DPH
000C C082              PUSH    DPL
000E C0A7              PUSH    DPCON
0010 75A700            MOV     DPCON,#00H
0013 C0D0              PUSH    PSW
0015 75D000            MOV     PSW,#00H
0018 C000              PUSH    AR0
001A C001              PUSH    AR1
001C C002              PUSH    AR2
001E C003              PUSH    AR3
0020 C004              PUSH    AR4
0022 C005              PUSH    AR5
0024 C006              PUSH    AR6
0026 C007              PUSH    AR7
C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 9   

                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 153
0028 C2AF              CLR     EA
                                           ; SOURCE LINE # 154
002A 309807            JNB     RI,?C0019
                                           ; SOURCE LINE # 155
002D C298              CLR     RI
                                           ; SOURCE LINE # 156
002F 120000      R     LCALL   prvvUARTRxISR
                                           ; SOURCE LINE # 158
0032 B2A7              CPL     TEST_UART
                                           ; SOURCE LINE # 159
0034         ?C0019:
                                           ; SOURCE LINE # 161
0034 30990D            JNB     TI,?C0020
                                           ; SOURCE LINE # 162
0037 C299              CLR     TI
                                           ; SOURCE LINE # 163
0039 900000      R     MOV     DPTR,#TxEnable
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F 6003              JZ      ?C0020
                                           ; SOURCE LINE # 164
0041 120000      R     LCALL   prvvUARTTxReadyISR
                                           ; SOURCE LINE # 165
0044         ?C0021:
                                           ; SOURCE LINE # 166
0044         ?C0020:
                                           ; SOURCE LINE # 167
0044 D2AF              SETB    EA
                                           ; SOURCE LINE # 168
0046         ?C0022:
0046 D007              POP     AR7
0048 D006              POP     AR6
004A D005              POP     AR5
004C D004              POP     AR4
004E D003              POP     AR3
0050 D002              POP     AR2
0052 D001              POP     AR1
0054 D000              POP     AR0
0056 D0D0              POP     PSW
0058 D0A7              POP     DPCON
005A D082              POP     DPL
005C D083              POP     DPH
005E 05A7              INC     DPCON
0060 D082              POP     DPL
0062 D083              POP     DPH
0064 D0F0              POP     B
0066 D0E0              POP     ACC
0068 32                RETI    
             ; FUNCTION UartISR (END)

             ; FUNCTION vMBPortClose (BEGIN)
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 175
0000         ?C0023:
0000 22                RET     
             ; FUNCTION vMBPortClose (END)

C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 10  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


eMBErrorCode . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
EV_FRAME_SENT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ULONG. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
ADCSTAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
pxMBFunctionHandler. . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
MB_PAR_ODD . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UartISR. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
MB_EX_SLAVE_BUSY . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EV_EXECUTE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SHORT. . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
EV_FRAME_RECEIVED. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_ACKNOWLEDGE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TxEnable . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
xMBFunctionHandler . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  ucFunctionCode . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  pxHandler. . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
MB_EX_GATEWAY_PATH_FAILED. . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EILLSTATE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
MB_EX_NONE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CHAR . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
eMBEventType . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
I2CCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
_?xMBASCIIReceiveFSM . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MB_ETIMEDOUT . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
vMBPortClose . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
eMBException . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_xMBPortSerialInit . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucPORT . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ulBaudRate . . . . . . . . . . . . .  AUTO     XDATA  U_LONG   0001H  4
  ucDataBits . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  eParity. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  ucUCSRC. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0007H  1
BOOL . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
MB_EINVAL. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LONG . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
MB_ENOREG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_?xMBASCIITransmitFSM. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
UART_Init. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
xMBRTUReceiveFSM . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
MB_EX_ILLEGAL_FUNCTION . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
MB_REG_WRITE . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ENOERR. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ENORES. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
prvvUARTTxReadyISR . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
xMBRTUTransmitFSM. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
C51 COMPILER V9.00   PORTSERIAL                                                            06/19/2014 16:55:32 PAGE 11  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


MB_EX_ILLEGAL_DATA_VALUE . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBRegisterMode. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
prvvUARTRxISR. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
MB_REG_READ. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EIO . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_xMBPortSerialGetByte. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  pucByte. . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
SPICON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
MB_EX_ILLEGAL_DATA_ADDRESS . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_TCP . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_ASCII . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_GATEWAY_TGT_FAILED . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_vMBPortSerialEnable . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  xRxEnable. . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
  xTxEnable. . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0001H  1
TEST_UART. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
MB_PAR_EVEN. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBCurrentMode . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
MB_PAR_NONE. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
MB_EPORTERR. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_xMBPortSerialPutByte. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ucByte . . . . . . . . . . . . . . .  AUTO     XDATA  CHAR     0000H  1
USHORT . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
MB_EX_SLAVE_DEVICE_FAILURE . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_RTU . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MB_EX_MEMORY_PARITY_ERROR. . . . . . .  E_CONST  -----  U_CHAR   -----  1
eMBParity. . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
EV_READY . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UCHAR. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
eMBMode. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    329    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     15    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  6 WARNING(S),  0 ERROR(S)
