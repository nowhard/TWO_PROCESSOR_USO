C51 COMPILER V9.00   ULONGSORT                                                             06/23/2014 16:49:28 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ULONGSORT
OBJECT MODULE PLACED IN ulongsort.OBJ
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE ulongsort.c LARGE OPTIMIZE(6,SPEED) BROWSE ORDER NOAREGS DEBU
                    -G OBJECTEXTEND

line level    source

   1          #include "ulongsort.h"
   2          #include "watchdog.h"
   3          
   4          volatile unsigned long mas_copy[ADC_BUF_SIZE];
   5          volatile unsigned char xdata mid_cycle_counter=0;
   6          volatile unsigned long  temp;
   7          
   8          //------------------------------------------------
   9          //#pragma OT(0,Speed) 
  10           PT_THREAD(ulongsort_process(struct pt *pt))
  11           {
  12   1         static volatile  unsigned char counter=0,i=0,j=0;
  13   1         wdt_count[Sort_Proc].process_state=RUN;
  14   1         
  15   1         PT_BEGIN(pt);
  16   3      
  17   3        while(1) 
  18   3        {
  19   4                 PT_DELAY(pt,1);
  20   4                //------------ищем новое измерение-----------------
  21   4      
  22   4                      if(!adc_channels[mid_cycle_counter].new_measuring)
  23   4                      {
  24   5                              counter=0;
  25   5                              while((!adc_channels[mid_cycle_counter].new_measuring) && (counter!=ADC_CHANNELS_NUM))
  26   5                              {
  27   6                                      mid_cycle_counter= (mid_cycle_counter+1)&0x7;
  28   6                                      counter++;
  29   6                                      PT_YIELD(pt);//отдаем другим процессам
  30   6                              }
  31   5                              
  32   5                              if(counter==ADC_CHANNELS_NUM)//если нового измерения не найдено-рестарт процесса
  33   5                              {
  34   6                                  PT_RESTART(pt);
  35   6                              }
  36   5                      }
  37   4              
  38   4                //-----------------копируем во временный массив-----------------------------
  39   4                      memcpy(mas_copy,adc_channels[mid_cycle_counter].ADC_BUF_UN,ADC_BUF_SIZE*sizeof(unsigned long)); 
  40   4                      PT_YIELD(pt);//отдаем другим процессам
  41   4                //--------------сортировка пузырьком--------------------------------
  42   4                        for (i=ADC_BUF_SIZE-1;i>0;i--)
  43   4                        {
  44   5                          for (j=0;j<i;j++)
  45   5                          {
  46   6                              if(mas_copy[j]>mas_copy[j+1])
  47   6                              {
  48   7                                  temp=mas_copy[j];
  49   7                                  mas_copy[j]=mas_copy[j+1];
  50   7                                  mas_copy[j+1]=temp;
  51   7                              }
  52   6                                      PT_YIELD(pt);
  53   6                           }
  54   5                        }
C51 COMPILER V9.00   ULONGSORT                                                             06/23/2014 16:49:28 PAGE 2   

  55   4                 //-----------находим медиану--------------------
  56   4                      channels[mid_cycle_counter].channel_data=(mas_copy[(ADC_BUF_SIZE>>1)-1]+mas_copy[ADC_BUF_SIZE>>1])>>1;
  57   4      
  58   4                      if(channels[mid_cycle_counter].calibrate.cal.calibrate)
  59   4                      {
  60   5                              channels[mid_cycle_counter].channel_data_calibrate=GetCalibrateVal(mid_cycle_counter,channels[mid_cycl
             -e_counter].channel_data);     //калиброванная величина
  61   5                      }
  62   4      
  63   4                      adc_channels[mid_cycle_counter].new_measuring=0;
  64   4                      wdt_count[Sort_Proc].count++;
  65   4                      PT_RESTART(pt);
  66   4                //----------------------------------------------      
  67   4         }
  68   3         PT_END(pt);
  69   1       }
  70          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    816    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     40       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
